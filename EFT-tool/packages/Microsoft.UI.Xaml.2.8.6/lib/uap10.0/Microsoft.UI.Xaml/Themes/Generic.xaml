<ResourceDictionary xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:controls="using:Microsoft.UI.Xaml.Controls"  xmlns:primitives="using:Microsoft.UI.Xaml.Controls.Primitives"   xmlns:primitiveContract7Present="using:Microsoft.UI.Xaml.Controls.Primitives?IsApiContractPresent(Windows.Foundation.UniversalApiContract,7)" xmlns:animatedvisuals="using:Microsoft.UI.Xaml.Controls.AnimatedVisuals"     xmlns:media="using:Microsoft.UI.Xaml.Media" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <Style TargetType="controls:RatingControl">
    <Setter Property="Height" Value="32" />
    <!-- 9794813: retire these two properties as customisation points once all resource keys available -->
    <Setter Property="Foreground" Value="{ThemeResource RatingControlCaptionForeground}" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <Setter Property="ItemInfo" Value="{ThemeResource MUX_RatingControlDefaultFontInfo}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:RatingControl">
          <Grid x:Name="LayoutRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlDisabledSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Placeholder">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPlaceholderForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPointerOverPlaceholderForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverUnselected">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPointerOverUnselectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Set">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSet">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="-20,-20,-20,-20">
              <StackPanel x:Name="RatingBackgroundStackPanel" Orientation="Horizontal" Background="Transparent" Margin="20,20,0,20" />
              <TextBlock x:Name="Caption" Height="32" Margin="4,9,20,0" TextLineBounds="TrimToBaseline" Style="{ThemeResource CaptionTextBlockStyle}" Foreground="{ThemeResource RatingControlCaptionForeground}" VerticalAlignment="Center" IsHitTestVisible="False" AutomationProperties.AccessibilityView="Raw" AutomationProperties.Name="RatingCaption" Text="{TemplateBinding Caption}" />
              <!-- 4 = 8 item spacing +4 of magic redline spacing -8 to compensate for scale of the last RatingItem -->
              <!-- NB: The redlines say 8px, but it's really 12 px because:
                                Designer note: The value between the last glyph and first text character is 12px.
                                (There's 4px of whitespace accounted for in the text area in the redline) -->
              <!-- TODO MSFT: 9925444 Fix vertical alignment in all text scenarios -->
            </StackPanel>
            <ContentPresenter x:Name="ForegroundContentPresenter" IsHitTestVisible="False" Grid.Row="0">
              <!-- Margin is on the StackPanel because ContentPresenter clips differently such that moving the reverse margin up won't work -->
              <StackPanel Orientation="Horizontal" Margin="-40,-40,-40,-40">
                <StackPanel x:Name="RatingForegroundStackPanel" Orientation="Horizontal" IsHitTestVisible="False" Margin="40,40,40,40" />
              </StackPanel>
            </ContentPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:InfoBadge" BasedOn="{StaticResource DefaultInfoBadgeStyle}" />
  <Style TargetType="controls:NavigationView">
    <Setter Property="PaneToggleButtonStyle" Value="{StaticResource PaneToggleButtonStyle}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="CompactPaneLength" Value="{ThemeResource NavigationViewCompactPaneLength}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationView">
          <Grid x:Name="RootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeGroup">
                <VisualState x:Name="Compact" />
                <VisualState x:Name="Expanded" />
                <VisualState x:Name="Minimal">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="{ThemeResource NavigationViewMinimalHeaderMargin}" />
                    <Setter Target="NavigationViewBackButton.Style" Value="{ThemeResource NavigationBackButtonSmallStyle}" />
                    <Setter Target="ContentGrid.BorderThickness" Value="{ThemeResource NavigationViewMinimalContentGridBorderThickness}" />
                    <Setter Target="ContentGrid.CornerRadius" Value="{ThemeResource NavigationViewMinimalContentGridCornerRadius}" />
                    <Setter Target="ContentGrid.Margin" Value="{ThemeResource NavigationViewMinimalContentMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TopNavigationMinimal">
                  <VisualState.Setters>
                    <Setter Target="ContentGrid.BorderThickness" Value="{ThemeResource TopNavigationViewContentGridBorderThickness}" />
                    <Setter Target="ContentGrid.CornerRadius" Value="{ThemeResource TopNavigationViewContentGridCornerRadius}" />
                    <Setter Target="ContentGrid.Margin" Value="{ThemeResource TopNavigationViewContentMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="MinimalWithBackButton">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="{ThemeResource NavigationViewMinimalHeaderMargin}" />
                    <Setter Target="NavigationViewBackButton.Style" Value="{ThemeResource NavigationBackButtonSmallStyle}" />
                    <Setter Target="ContentGrid.BorderThickness" Value="{ThemeResource NavigationViewMinimalContentGridBorderThickness}" />
                    <Setter Target="ContentGrid.CornerRadius" Value="{ThemeResource NavigationViewMinimalContentGridCornerRadius}" />
                    <Setter Target="ContentGrid.Margin" Value="{ThemeResource NavigationViewMinimalContentMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TogglePaneGroup">
                <VisualState x:Name="TogglePaneButtonCollapsed" />
                <VisualState x:Name="TogglePaneButtonVisible">
                  <VisualState.Setters>
                    <!-- Might not need this setter when all the margins/paddings will be adequately set. -->
                    <!-- This MinHeight setter is only here to ensure that AutoSuggestBox doesn't draw over ToggleButton. -->
                    <Setter Target="PaneContentGridToggleButtonRow.MinHeight" Value="{StaticResource NavigationViewPaneHeaderRowMinHeight}" />
                    <Setter Target="PaneTitlePresenter.Margin" Value="{ThemeResource NavigationViewItemInnerHeaderMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderGroup">
                <VisualState x:Name="HeaderVisible" />
                <VisualState x:Name="HeaderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AutoSuggestGroup">
                <VisualState x:Name="AutoSuggestBoxVisible" />
                <VisualState x:Name="AutoSuggestBoxCollapsed">
                  <VisualState.Setters>
                    <Setter Target="AutoSuggestArea.Visibility" Value="Collapsed" />
                    <Setter Target="TopPaneAutoSuggestArea.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateGroup">
                <VisualState x:Name="NotClosedCompact" />
                <VisualState x:Name="ClosedCompact">
                  <VisualState.Setters>
                    <Setter Target="PaneAutoSuggestBoxPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="PaneAutoSuggestButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateListSizeGroup">
                <VisualState x:Name="ListSizeFull" />
                <VisualState x:Name="ListSizeCompact">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
                    <Setter Target="ShadowCaster.Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
                    <Setter Target="PaneTitleTextBlock.Visibility" Value="Collapsed" />
                    <Setter Target="PaneHeaderContentBorder.Visibility" Value="Collapsed" />
                    <Setter Target="PaneCustomContentBorder.HorizontalAlignment" Value="Left" />
                    <Setter Target="FooterContentBorder.HorizontalAlignment" Value="Left" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneOverlayGroup">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="PaneNotOverlaying" To="PaneOverlaying">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowCasterTransform" Storyboard.TargetProperty="TranslateX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding ElementName=RootSplitView, Path=TemplateSettings.NegativeOpenPaneLengthMinusCompactLength}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.35" KeySpline="0.1,0.9 0.2,1.0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowCaster" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.35" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ShadowCaster" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="PaneOverlaying" To="PaneNotOverlaying">
                    <Storyboard x:Name="ShadowCasterEaseOutStoryboard">
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowCasterTransform" Storyboard.TargetProperty="TranslateX">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding ElementName=RootSplitView, Path=TemplateSettings.NegativeOpenPaneLengthMinusCompactLength}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowCaster" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.12" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ShadowCaster" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="PaneOverlaying" />
                <VisualState x:Name="PaneNotOverlaying">
                  <VisualState.Setters>
                    <Setter Target="RootSplitView.BorderBrush" Value="Transparent" />
                    <Setter Target="ShadowCaster.Opacity" Value="0" />
                    <Setter Target="RootSplitView.PaneBackground" Value="{ThemeResource NavigationViewExpandedPaneBackground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TitleBarVisibilityGroup">
                <VisualState x:Name="TitleBarVisible" />
                <VisualState x:Name="TitleBarCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Margin" Value="0,32,0,0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="OverflowLabelGroup">
                <VisualState x:Name="OverflowButtonWithLabel" />
                <VisualState x:Name="OverflowButtonNoLabel">
                  <VisualState.Setters>
                    <Setter Target="TopNavOverflowButton.Style" Value="{ThemeResource NavigationViewOverflowButtonNoLabelStyleWhenPaneOnTop}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BackButtonGroup">
                <VisualState x:Name="BackButtonVisible" />
                <VisualState x:Name="BackButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="BackButtonPlaceholderOnTopNav.Width" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneVisibilityGroup">
                <VisualState x:Name="PaneVisible" />
                <VisualState x:Name="PaneCollapsed">
                  <VisualState.Setters>
                    <!-- Note that RootSplitView.DisplayMode is set in code so we don't want to -->
                    <!-- write it here and interfere. But these values work together to hide -->
                    <!-- the left pane. -->
                    <Setter Target="RootSplitView.CompactPaneLength" Value="0" />
                    <Setter Target="ShadowCaster.Width" Value="0" />
                    <Setter Target="PaneToggleButtonGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneSeparatorStates">
                <VisualState x:Name="SeparatorCollapsed" />
                <VisualState x:Name="SeparatorVisible">
                  <VisualState.Setters>
                    <Setter Target="VisualItemsSeparator.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Button grid -->
            <Grid x:Name="PaneToggleButtonGrid" HorizontalAlignment="Left" VerticalAlignment="Top" Canvas.ZIndex="100">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid x:Name="TogglePaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
              <Grid x:Name="ButtonHolderGrid" Grid.Row="1" Margin="{ThemeResource NavigationViewButtonHolderGridMargin}">
                <Button x:Name="NavigationViewBackButton" Style="{StaticResource NavigationBackButtonNormalStyle}" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SmallerPaneToggleButtonWidth}" VerticalAlignment="Top" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.BackButtonVisibility}" IsEnabled="{TemplateBinding IsBackEnabled}">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="NavigationViewBackButtonToolTip" />
                  </ToolTipService.ToolTip>
                </Button>
                <Button x:Name="NavigationViewCloseButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="NavigationViewCloseButtonToolTip" />
                  </ToolTipService.ToolTip>
                </Button>
                <Button x:Name="TogglePaneButton" Style="{TemplateBinding PaneToggleButtonStyle}" AutomationProperties.LandmarkType="Navigation" HorizontalAlignment="Center" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.PaneToggleButtonVisibility}" VerticalAlignment="Top" MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SmallerPaneToggleButtonWidth}" FocusVisualMargin="0">
                  <TextBlock x:Name="PaneTitleTextBlock" Grid.Column="0" Margin="0,-2,0,0" Text="{TemplateBinding PaneTitle}" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource NavigationViewItemHeaderTextStyle}" />
                </Button>
                <Grid x:Name="PaneTitleHolder" Height="40" Visibility="Collapsed">
                  <ContentControl x:Name="PaneTitlePresenter" Margin="{ThemeResource NavigationViewPaneTitlePresenterMargin}" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" />
                </Grid>
              </Grid>
            </Grid>
            <!-- Content layouts -->
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <!-- DisplayMode top -->
              <StackPanel x:Name="TopNavArea" Background="{ThemeResource NavigationViewTopPaneBackground}" Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Canvas.ZIndex="1" XYFocusKeyboardNavigation="Enabled">
                <Grid x:Name="TopNavTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPaneVisibility}" />
                <Grid x:Name="TopNavGrid" Height="{ThemeResource NavigationViewTopPaneHeight}" Margin="{ThemeResource TopNavigationViewTopNavGridMargin}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPaneVisibility}" BorderBrush="{ThemeResource NavigationViewItemSeparatorForeground}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="BackButtonPlaceholderOnTopNav" Width="{ThemeResource NavigationBackButtonWidth}" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" MinWidth="{ThemeResource TopNavigationViewPaneCustomContentMinWidth}" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Grid x:Name="TopNavLeftPadding" Grid.Column="1" Width="0" />
                  <ContentControl x:Name="PaneHeaderOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="2" />
                  <ContentControl x:Name="PaneTitleOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Margin="{ThemeResource NavigationViewItemInnerHeaderMargin}" Grid.Column="2" />
                  <!-- Top nav ItemsRepeater -->
                  <controls:ItemsRepeaterScrollHost Grid.Column="3">
                    <ScrollViewer HorizontalScrollMode="Disabled" HorizontalScrollBarVisibility="Hidden" VerticalScrollMode="Disabled" VerticalScrollBarVisibility="Hidden">
                      <controls:ItemsRepeater AutomationProperties.LandmarkType="Navigation" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}" AutomationProperties.AccessibilityView="Content" x:Name="TopNavMenuItemsHost">
                        <controls:ItemsRepeater.Layout>
                          <controls:StackLayout Orientation="Horizontal" />
                        </controls:ItemsRepeater.Layout>
                      </controls:ItemsRepeater>
                    </ScrollViewer>
                  </controls:ItemsRepeaterScrollHost>
                  <Button x:Name="TopNavOverflowButton" Grid.Column="4" Content="More" Margin="{ThemeResource TopNavigationViewOverflowButtonMargin}" Style="{StaticResource NavigationViewOverflowButtonStyleWhenPaneOnTop}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.OverflowButtonVisibility}">
                    <Button.Flyout>
                      <Flyout Placement="Bottom" ElementSoundMode="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ElementSoundMode}">
                        <Flyout.FlyoutPresenterStyle>
                          <Style TargetType="FlyoutPresenter">
                            <Setter Property="Padding" Value="{ThemeResource TopNavigationViewOverflowMenuPadding}" />
                            <!-- Set negative top margin to make the flyout align exactly with the button -->
                            <Setter Property="Margin" Value="0,-4,0,0" />
                            <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Auto" />
                            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                            <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
                            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                            <Setter Property="ScrollViewer.ZoomMode" Value="Disabled" />
                            <Setter Property="Template">
                              <Setter.Value>
                                <ControlTemplate TargetType="FlyoutPresenter">
                                  <ScrollViewer x:Name="ScrollViewer" ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" AutomationProperties.AccessibilityView="Raw">
                                    <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="{ThemeResource OverlayCornerRadius}" />
                                  </ScrollViewer>
                                </ControlTemplate>
                              </Setter.Value>
                            </Setter>
                          </Style>
                        </Flyout.FlyoutPresenterStyle>
                        <controls:ItemsRepeaterScrollHost>
                          <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <controls:ItemsRepeater AutomationProperties.AccessibilityView="Content" x:Name="TopNavMenuItemsOverflowHost">
                              <controls:ItemsRepeater.Layout>
                                <controls:StackLayout />
                              </controls:ItemsRepeater.Layout>
                            </controls:ItemsRepeater>
                          </ScrollViewer>
                        </controls:ItemsRepeaterScrollHost>
                      </Flyout>
                    </Button.Flyout>
                  </Button>
                  <ContentControl x:Name="PaneCustomContentOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="5" />
                  <Grid x:Name="TopPaneAutoSuggestArea" Height="{ThemeResource NavigationViewTopPaneHeight}" Grid.Column="6">
                    <ContentControl x:Name="TopPaneAutoSuggestBoxPresenter" Margin="{ThemeResource TopNavigationViewAutoSuggestBoxMargin}" MinWidth="216" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center" />
                  </Grid>
                  <ContentControl x:Name="PaneFooterOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="7" />
                  <!-- Top footer menu ItemsRepeater -->
                  <controls:ItemsRepeater Grid.Column="8" AutomationProperties.LandmarkType="Navigation" AutomationProperties.AccessibilityView="Content" x:Name="TopFooterMenuItemsHost">
                    <controls:ItemsRepeater.Layout>
                      <controls:StackLayout Orientation="Horizontal" />
                    </controls:ItemsRepeater.Layout>
                  </controls:ItemsRepeater>
                </Grid>
                <Border x:Name="TopNavContentOverlayAreaGrid" Child="{TemplateBinding ContentOverlay}" />
              </StackPanel>
              <!-- Displaymode (compact/minimal/normal) left -->
              <SplitView x:Name="RootSplitView" Background="{TemplateBinding Background}" BorderBrush="{ThemeResource NavigationViewItemSeparatorForeground}" BorderThickness="{ThemeResource NavigationViewBorderThickness}" CompactPaneLength="{TemplateBinding CompactPaneLength}" DisplayMode="Inline" IsPaneOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Mode=TwoWay}" IsTabStop="False" OpenPaneLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.OpenPaneLength}" PaneBackground="{ThemeResource NavigationViewDefaultPaneBackground}" Grid.Row="1">
                <SplitView.Pane>
                  <Grid x:Name="PaneContentGrid" BorderBrush="{ThemeResource NavigationViewItemSeparatorForeground}" HorizontalAlignment="Left" Margin="{ThemeResource NavigationViewPaneContentGridMargin}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="0" />
                      <!-- above button margin + back button space -->
                      <RowDefinition x:Name="PaneContentGridToggleButtonRow" Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="0" />
                      <!-- above list margin -->
                      <RowDefinition x:Name="ItemsContainerRow" Height="*" />
                    </Grid.RowDefinitions>
                    <Grid x:Name="ContentPaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
                    <Grid Grid.Row="2">
                      <Grid.RowDefinitions>
                        <RowDefinition x:Name="PaneHeaderContentBorderRow" />
                      </Grid.RowDefinitions>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="PaneHeaderCloseButtonColumn" />
                        <ColumnDefinition x:Name="PaneHeaderToggleButtonColumn" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <ContentControl x:Name="PaneHeaderContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="2" />
                    </Grid>
                    <Grid x:Name="AutoSuggestArea" Grid.Row="3" Height="{ThemeResource NavigationViewAutoSuggestAreaHeight}" Margin="0,0,0,8" VerticalAlignment="Center">
                      <ContentControl x:Name="PaneAutoSuggestBoxPresenter" Margin="{ThemeResource NavigationViewAutoSuggestBoxMargin}" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center" />
                      <Button x:Name="PaneAutoSuggestButton" Visibility="Collapsed" Style="{ThemeResource NavigationViewPaneSearchButtonStyle}" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SmallerPaneToggleButtonWidth}">
                        <Button.Resources>
                          <ResourceDictionary>
                            <ResourceDictionary.ThemeDictionaries>
                              <ResourceDictionary x:Key="Default">
                                <StaticResource x:Key="ButtonBackgroundPointerOver" ResourceKey="NavigationViewItemBackgroundPointerOver" />
                                <StaticResource x:Key="ButtonBackgroundPressed" ResourceKey="NavigationViewItemBackgroundPressed" />
                                <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="NavigationViewItemBackgroundDisabled" />
                                <StaticResource x:Key="ButtonForegroundPointerOver" ResourceKey="NavigationViewItemForegroundPointerOver" />
                                <StaticResource x:Key="ButtonForegroundPressed" ResourceKey="NavigationViewItemForegroundPressed" />
                                <StaticResource x:Key="ButtonForegroundDisabled" ResourceKey="NavigationViewItemForegroundDisabled" />
                                <StaticResource x:Key="ButtonBorderBrushPointerOver" ResourceKey="NavigationViewItemBorderBrushPointerOver" />
                                <StaticResource x:Key="ButtonBorderBrushPressed" ResourceKey="NavigationViewItemBorderBrushPressed" />
                                <StaticResource x:Key="ButtonBorderBrushDisabled" ResourceKey="NavigationViewItemBorderBrushDisabled" />
                              </ResourceDictionary>
                              <ResourceDictionary x:Key="Light">
                                <StaticResource x:Key="ButtonBackgroundPointerOver" ResourceKey="NavigationViewItemBackgroundPointerOver" />
                                <StaticResource x:Key="ButtonBackgroundPressed" ResourceKey="NavigationViewItemBackgroundPressed" />
                                <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="NavigationViewItemBackgroundDisabled" />
                                <StaticResource x:Key="ButtonForegroundPointerOver" ResourceKey="NavigationViewItemForegroundPointerOver" />
                                <StaticResource x:Key="ButtonForegroundPressed" ResourceKey="NavigationViewItemForegroundPressed" />
                                <StaticResource x:Key="ButtonForegroundDisabled" ResourceKey="NavigationViewItemForegroundDisabled" />
                                <StaticResource x:Key="ButtonBorderBrushPointerOver" ResourceKey="NavigationViewItemBorderBrushPointerOver" />
                                <StaticResource x:Key="ButtonBorderBrushPressed" ResourceKey="NavigationViewItemBorderBrushPressed" />
                                <StaticResource x:Key="ButtonBorderBrushDisabled" ResourceKey="NavigationViewItemBorderBrushDisabled" />
                              </ResourceDictionary>
                            </ResourceDictionary.ThemeDictionaries>
                          </ResourceDictionary>
                        </Button.Resources>
                      </Button>
                    </Grid>
                    <ContentControl x:Name="PaneCustomContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Row="4" />
                    <!-- "Non header" content -->
                    <Grid x:Name="ItemsContainerGrid" Grid.Row="6">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <!-- MenuItems -->
                        <RowDefinition Height="Auto" />
                        <!-- Separator if overflow -->
                        <RowDefinition Height="Auto" />
                        <!-- PaneFooter -->
                        <RowDefinition Height="Auto" />
                        <!-- FooterItems -->
                      </Grid.RowDefinitions>
                      <!-- MenuItems -->
                      <controls:ItemsRepeaterScrollHost HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <ScrollViewer x:Name="MenuItemsScrollViewer" TabNavigation="Local" VerticalScrollBarVisibility="Auto">
                          <!-- Left nav ItemsRepeater -->
                          <controls:ItemsRepeater x:Name="MenuItemsHost" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}" AutomationProperties.AccessibilityView="Content">
                            <controls:ItemsRepeater.Layout>
                              <controls:StackLayout />
                            </controls:ItemsRepeater.Layout>
                          </controls:ItemsRepeater>
                        </ScrollViewer>
                      </controls:ItemsRepeaterScrollHost>
                      <controls:NavigationViewItemSeparator x:Name="VisualItemsSeparator" Grid.Row="1" Margin="0,0,0,2" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Stretch" />
                      <!-- PaneFooter -->
                      <ContentControl x:Name="FooterContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Margin="0,0,0,4" Grid.Row="2" />
                      <!-- FooterItems -->
                      <controls:ItemsRepeaterScrollHost Grid.Row="3">
                        <ScrollViewer x:Name="FooterItemsScrollViewer" VerticalScrollBarVisibility="Auto">
                          <controls:ItemsRepeater x:Name="FooterMenuItemsHost" AutomationProperties.AccessibilityView="Content">
                            <controls:ItemsRepeater.Layout>
                              <controls:StackLayout />
                            </controls:ItemsRepeater.Layout>
                          </controls:ItemsRepeater>
                        </ScrollViewer>
                      </controls:ItemsRepeaterScrollHost>
                    </Grid>
                  </Grid>
                </SplitView.Pane>
                <SplitView.Content>
                  <Grid x:Name="ContentGrid" BorderBrush="{ThemeResource NavigationViewContentGridBorderBrush}" BorderThickness="{ThemeResource NavigationViewContentGridBorderThickness}" Background="{ThemeResource NavigationViewContentBackground}" Margin="{ThemeResource NavigationViewContentMargin}">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid x:Name="ContentTopPadding" Grid.ColumnSpan="2" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}" />
                    <Grid x:Name="ContentLeftPadding" Grid.Row="1" />
                    <ContentControl x:Name="HeaderContent" Grid.Row="1" Grid.Column="1" MinHeight="{StaticResource PaneToggleButtonHeight}" IsTabStop="False" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Style="{StaticResource NavigationViewTitleHeaderContentControlTextStyle}" />
                    <ContentPresenter x:Name="ContentPresenter" AutomationProperties.LandmarkType="Main" Grid.Row="2" Grid.ColumnSpan="2" Content="{TemplateBinding Content}" Margin="{ThemeResource NavigationViewContentPresenterMargin}" />
                  </Grid>
                </SplitView.Content>
              </SplitView>
              <Grid x:Name="ShadowCaster" Grid.RowSpan="2" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.OpenPaneLength}" HorizontalAlignment="Left">
                <Grid.RenderTransform>
                  <CompositeTransform x:Name="ShadowCasterTransform" />
                </Grid.RenderTransform>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:NavigationViewItem">
    <Setter Property="Foreground" Value="{ThemeResource NavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource NavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource NavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource NavigationViewItemBorderThickness}" />
    <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Margin" Value="{ThemeResource NavigationViewItemMargin}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="TabNavigation" Value="Once" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationViewItem">
          <Grid x:Name="NVIRootGrid">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ItemOnNavigationViewListPositionStates">
                <VisualState x:Name="OnLeftNavigation">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MUX_NavigationViewItemPresenterStyleWhenOnLeftPane}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationPrimary">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Margin" Value="{ThemeResource TopNavigationViewItemMargin}" />
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MUX_NavigationViewItemPresenterStyleWhenOnTopPane}" />
                    <Setter Target="ChildrenFlyout.Placement" Value="Bottom" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationOverflow">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MUX_NavigationViewItemPresenterStyleWhenOnTopPaneOverflow}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <primitives:NavigationViewItemPresenter x:Name="NavigationViewItemPresenter" Icon="{TemplateBinding Icon}" InfoBadge="{TemplateBinding InfoBadge}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UseSystemFocusVisuals="{TemplateBinding UseSystemFocusVisuals}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Content="{TemplateBinding Content}" primitiveContract7Present:CornerRadius="{TemplateBinding CornerRadius}" IsTabStop="false" Control.IsTemplateFocusTarget="True" />
            <controls:ItemsRepeater x:Load="False" Grid.Row="1" Visibility="Collapsed" x:Name="NavigationViewItemMenuItemsHost">
              <controls:ItemsRepeater.Layout>
                <controls:StackLayout Orientation="Vertical" />
              </controls:ItemsRepeater.Layout>
            </controls:ItemsRepeater>
            <FlyoutBase.AttachedFlyout>
              <Flyout x:Name="ChildrenFlyout" Placement="Right">
                <Flyout.FlyoutPresenterStyle>
                  <Style TargetType="FlyoutPresenter">
                    <Setter Property="Padding" Value="{ThemeResource NavigationViewItemChildrenMenuFlyoutPadding}" />
                    <!-- Set negative top margin to make the flyout align exactly with the button -->
                    <Setter Property="Margin" Value="0,-4,0,0" />
                    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.ZoomMode" Value="Disabled" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="FlyoutPresenter">
                          <ScrollViewer x:Name="ScrollViewer" ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" AutomationProperties.AccessibilityView="Raw">
                            <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="{ThemeResource OverlayCornerRadius}" />
                          </ScrollViewer>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Flyout.FlyoutPresenterStyle>
                <Grid x:Name="FlyoutRootGrid">
                  <Grid x:Name="FlyoutContentGrid" />
                </Grid>
              </Flyout>
            </FlyoutBase.AttachedFlyout>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" />
  <Style TargetType="controls:NavigationViewItemHeader">
    <Setter Property="Foreground" Value="{ThemeResource NavigationViewItemHeaderForeground}" />
    <Setter Property="IsEnabled" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationViewItemHeader">
          <Grid x:Name="NavigationViewItemHeaderRootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PaneStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="HeaderTextCollapsed" To="HeaderTextVisible">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InnerHeaderGrid" Storyboard.TargetProperty="Height">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="40" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderText" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HeaderText" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0" Value="0.0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0.0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.2" KeySpline="0.0,0.35 0.15,1.0" Value="1.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="HeaderTextVisible" To="HeaderTextCollapsed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InnerHeaderGrid" Storyboard.TargetProperty="Height">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderText" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="Collapsed" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HeaderText" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0" Value="1.0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.1" KeySpline="0.0,0.35 0.15,1.0" Value="0.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="HeaderTextVisible" />
                <VisualState x:Name="HeaderTextCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HeaderText.Visibility" Value="Collapsed" />
                    <Setter Target="InnerHeaderGrid.Height" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualState x:Name="LeftMode" />
                <VisualState x:Name="TopMode">
                  <VisualState.Setters>
                    <Setter Target="InnerHeaderGrid.Margin" Value="{ThemeResource TopNavigationViewItemInnerHeaderMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="InnerHeaderGrid" Height="40" HorizontalAlignment="Left" Margin="{ThemeResource NavigationViewItemInnerHeaderMargin}">
              <TextBlock x:Name="HeaderText" VerticalAlignment="Center" Margin="0,-1,0,-1" Style="{StaticResource NavigationViewItemHeaderTextStyle}" Text="{TemplateBinding Content}" TextWrapping="NoWrap" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:NavigationViewItemSeparator">
    <Setter Property="IsEnabled" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="NavigationViewItemSeparatorRootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="NavigationSeparatorLineStates">
                <VisualState x:Name="HorizontalLine" />
                <VisualState x:Name="HorizontalLineCompact">
                  <VisualState.Setters>
                    <Setter Target="SeparatorLine.Margin" Value="{ThemeResource NavigationViewCompactItemSeparatorMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VerticalLine">
                  <VisualState.Setters>
                    <Setter Target="SeparatorLine.Height" Value="24" />
                    <Setter Target="SeparatorLine.Width" Value="{ThemeResource TopNavigationViewItemSeparatorWidth}" />
                    <Setter Target="SeparatorLine.Margin" Value="{ThemeResource TopNavigationViewItemSeparatorMargin}" />
                    <Setter Target="SeparatorLine.VerticalAlignment" Value="Center" />
                    <Setter Target="SeparatorLine.Fill" Value="{ThemeResource TopNavigationViewItemSeparatorForeground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="SeparatorLine" Height="{ThemeResource NavigationViewItemSeparatorHeight}" Fill="{ThemeResource NavigationViewItemSeparatorForeground}" Margin="{ThemeResource NavigationViewItemSeparatorMargin}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NavigationBackButtonNormalStyle" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource NavigationViewBackButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource NavigationViewItemForeground}" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <Setter Property="FontSize" Value="16" />
    <Setter Property="Height" Value="{ThemeResource NavigationBackButtonHeight}" />
    <Setter Property="Width" Value="{ThemeResource NavigationBackButtonWidth}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="Content" Value="&#xE72B;" />
    <Setter Property="Margin" Value="4,2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" CornerRadius="{ThemeResource ControlCornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource NavigationViewButtonBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource NavigationViewButtonForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                  <VisualState.Setters>
                    <Setter Target="Content.(controls:AnimatedIcon.State)" Value="PointerOver" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource NavigationViewButtonBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource NavigationViewButtonForegroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                  <VisualState.Setters>
                    <Setter Target="Content.(controls:AnimatedIcon.State)" Value="Pressed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource NavigationViewButtonForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <local:AnimatedIcon x:Name="Content" Height="16" Width="16" local:AnimatedIcon.State="Normal" MirroredWhenRightToLeft="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" xmlns:local="using:Microsoft.UI.Xaml.Controls">
              <animatedvisuals:AnimatedBackVisualSource />
              <local:AnimatedIcon.FallbackIconSource>
                <local:FontIconSource FontSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontSize}" FontFamily="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontFamily}" Glyph="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" MirroredWhenRightToLeft="True" />
              </local:AnimatedIcon.FallbackIconSource>
            </local:AnimatedIcon>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NavigationBackButtonSmallStyle" TargetType="Button" BasedOn="{StaticResource NavigationBackButtonNormalStyle}">
    <Setter Property="Margin" Value="4,2,0,2" />
  </Style>
  <Style TargetType="controls:ColorPicker" BasedOn="{StaticResource DefaultColorPickerStyle}" />
  <Style x:Key="DefaultColorPickerStyle" TargetType="controls:ColorPicker">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:ColorPicker">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" Padding="0,4" MaxWidth="{StaticResource ColorPickerVerticalOrientationMaxWidth}" MinWidth="{StaticResource ColorPickerVerticalOrientationMinWidth}">
            <Grid.Resources>
              <SolidColorBrush x:Name="CheckerColorBrush" Color="{ThemeResource SystemListLowColor}" />
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ColorSpectrumVisibility">
                <VisualState x:Name="ColorSpectrumVisible" />
                <VisualState x:Name="ColorSpectrumCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ColorSpectrum.Visibility" Value="Collapsed" />
                    <Setter Target="ColorPreviewRectangleGrid.Width" Value="NaN" />
                    <Setter Target="ColorPreviewRectangleGrid.Height" Value="44" />
                    <Setter Target="ColorPreviewRectangleGrid.Margin" Value="0" />
                    <Setter Target="ColorPreviewRectangleGrid.(Grid.Column)" Value="0" />
                    <Setter Target="ColorPreviewRectangleGrid.(Grid.ColumnSpan)" Value="2" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ColorPreviewVisibility">
                <VisualState x:Name="ColorPreviewVisible" />
                <VisualState x:Name="ColorPreviewCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ColorPreviewRectangleGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PreviousColorVisibility">
                <VisualState x:Name="PreviousColorCollapsedVertical" />
                <VisualState x:Name="PreviousColorVisibleVertical">
                  <VisualState.Setters>
                    <Setter Target="ColorPreviewRectangle.(Grid.RowSpan)" Value="1" />
                    <Setter Target="PreviousColorRectangle.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PreviousColorCollapsedHorizontal">
                  <VisualState.Setters>
                    <Setter Target="PreviousColorRectangle.(Grid.Row)" Value="0" />
                    <Setter Target="PreviousColorRectangle.(Grid.Column)" Value="1" />
                    <Setter Target="PreviousColorRectangle.(Grid.RowSpan)" Value="2" />
                    <Setter Target="PreviousColorRectangle.(Grid.ColumnSpan)" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PreviousColorVisibleHorizontal">
                  <VisualState.Setters>
                    <Setter Target="ColorPreviewRectangle.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="PreviousColorRectangle.Visibility" Value="Visible" />
                    <Setter Target="PreviousColorRectangle.(Grid.Row)" Value="0" />
                    <Setter Target="PreviousColorRectangle.(Grid.Column)" Value="1" />
                    <Setter Target="PreviousColorRectangle.(Grid.RowSpan)" Value="2" />
                    <Setter Target="PreviousColorRectangle.(Grid.ColumnSpan)" Value="1" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ThirdDimensionSliderVisibility">
                <VisualState x:Name="ThirdDimensionSliderVisible" />
                <VisualState x:Name="ThirdDimensionSliderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ThirdDimensionSliderGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AlphaSliderVisibility">
                <VisualState x:Name="AlphaSliderVisible" />
                <VisualState x:Name="AlphaSliderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="AlphaSliderGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="MoreButtonVisibility">
                <VisualState x:Name="MoreButtonVisible" />
                <VisualState x:Name="MoreButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="MoreButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TextEntryGridVisibility">
                <VisualState x:Name="TextEntryGridCollapsed" />
                <VisualState x:Name="TextEntryGridVisible">
                  <VisualState.Setters>
                    <Setter Target="TextEntryGrid.Visibility" Value="Visible" />
                    <Setter Target="MoreGlyph.Glyph" Value="&#xE70E;" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ColorChannelTextInputVisibility">
                <VisualState x:Name="ColorChannelTextInputVisible" />
                <VisualState x:Name="ColorChannelTextInputCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ColorRepresentationComboBox.Visibility" Value="Collapsed" />
                    <Setter Target="ColorChannelTextInputPanel.Visibility" Value="Collapsed" />
                    <Setter Target="HexTextBox.(Grid.Column)" Value="0" />
                    <Setter Target="HexTextBox.HorizontalAlignment" Value="Left" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AlphaTextInputVisibility">
                <VisualState x:Name="AlphaTextInputVisible" />
                <VisualState x:Name="AlphaTextInputCollapsed">
                  <VisualState.Setters>
                    <Setter Target="AlphaPanel.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ColorRepresentationSelected">
                <VisualState x:Name="RgbSelected" />
                <VisualState x:Name="HsvSelected">
                  <VisualState.Setters>
                    <Setter Target="RgbPanel.Visibility" Value="Collapsed" />
                    <Setter Target="HsvPanel.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HexInputVisibility">
                <VisualState x:Name="HexInputVisible" />
                <VisualState x:Name="HexInputCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HexTextBox.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AlphaEnabledState">
                <VisualState x:Name="AlphaDisabled" />
                <VisualState x:Name="AlphaEnabled">
                  <VisualState.Setters>
                    <Setter Target="HexTextBox.MaxLength" Value="9" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="Orientation">
                <VisualState x:Name="Vertical" />
                <VisualState x:Name="Horizontal">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.MinHeight" Value="{StaticResource ColorPickerVerticalOrientationMinHeight}" />
                    <Setter Target="RootGrid.MaxHeight" Value="{StaticResource ColorPickerVerticalOrientationMaxHeight}" />
                    <Setter Target="RootGrid.MinWidth" Value="0" />
                    <Setter Target="RootGrid.MaxWidth" Value="10000" />
                    <Setter Target="ColorSpectrumGrid.Margin" Value="0" />
                    <Setter Target="ColorPreviewRectangleGrid.Margin" Value="12,0,16,0" />
                    <Setter Target="ThirdDimensionSliderGrid.(Grid.Column)" Value="1" />
                    <Setter Target="ThirdDimensionSliderGrid.(Grid.Row)" Value="0" />
                    <Setter Target="ThirdDimensionSliderGrid.Margin" Value="0,0,6,0" />
                    <Setter Target="ThirdDimensionSlider.Orientation" Value="Vertical" />
                    <Setter Target="ThirdDimensionBackgroundRectangle.Height" Value="Auto" />
                    <Setter Target="ThirdDimensionBackgroundRectangle.Width" Value="12" />
                    <Setter Target="ThirdDimensionBackgroundRectangle.HorizontalAlignment" Value="Center" />
                    <Setter Target="ThirdDimensionBackgroundRectangle.VerticalAlignment" Value="Stretch" />
                    <Setter Target="ThirdDimensionBackgroundRectangle.RenderTransform">
                      <Setter.Value>
                        <RotateTransform Angle="180" />
                      </Setter.Value>
                    </Setter>
                    <Setter Target="AlphaSliderGrid.(Grid.Column)" Value="2" />
                    <Setter Target="AlphaSliderGrid.(Grid.Row)" Value="0" />
                    <Setter Target="AlphaSliderGrid.Margin" Value="0,0,16,0" />
                    <Setter Target="AlphaSlider.Orientation" Value="Vertical" />
                    <Setter Target="AlphaSliderCheckeredBackgroundRectangle.Height" Value="Auto" />
                    <Setter Target="AlphaSliderCheckeredBackgroundRectangle.Width" Value="12" />
                    <Setter Target="AlphaSliderCheckeredBackgroundRectangle.HorizontalAlignment" Value="Center" />
                    <Setter Target="AlphaSliderCheckeredBackgroundRectangle.VerticalAlignment" Value="Stretch" />
                    <Setter Target="AlphaSliderBackgroundRectangle.Height" Value="Auto" />
                    <Setter Target="AlphaSliderBackgroundRectangle.Width" Value="12" />
                    <Setter Target="AlphaSliderBackgroundRectangle.HorizontalAlignment" Value="Center" />
                    <Setter Target="AlphaSliderBackgroundRectangle.VerticalAlignment" Value="Stretch" />
                    <Setter Target="AlphaSliderBackgroundRectangle.RenderTransform">
                      <Setter.Value>
                        <RotateTransform Angle="180" />
                      </Setter.Value>
                    </Setter>
                    <Setter Target="MoreEntriesPanel.(Grid.Column)" Value="3" />
                    <Setter Target="MoreEntriesPanel.(Grid.Row)" Value="0" />
                    <Setter Target="MoreEntriesPanel.Margin" Value="0" />
                    <Setter Target="MoreButton.Margin" Value="0" />
                    <Setter Target="ColorRepresentationComboBox.(Grid.Row)" Value="1" />
                    <Setter Target="ColorTextInputPanels.(Grid.Row)" Value="2" />
                    <Setter Target="HexTextBox.TabIndex" Value="3" />
                    <Setter Target="HexTextBox.(Grid.Row)" Value="0" />
                    <Setter Target="HexTextBox.(Grid.Column)" Value="0" />
                    <Setter Target="HexTextBox.(Grid.ColumnSpan)" Value="3" />
                    <Setter Target="HexTextBox.Margin" Value="0,0,0,12" />
                    <Setter Target="HexTextBox.HorizontalAlignment" Value="Left" />
                    <Setter Target="HexTextBox.Width" Value="120" />
                    <Setter Target="RgbTextLabelColumn.Width" Value="{ThemeResource ColorPickerTextInputHorizontalOrientationMargin}" />
                    <Setter Target="HsvTextLabelColumn.Width" Value="{ThemeResource ColorPickerTextInputHorizontalOrientationMargin}" />
                    <Setter Target="AlphaTextLabelColumn.Width" Value="{ThemeResource ColorPickerTextInputHorizontalOrientationMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid x:Name="ColorSpectrumGrid" Margin="0,0,0,16">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <primitives:ColorSpectrum x:Name="ColorSpectrum" Grid.Column="0" Grid.Row="0" MaxWidth="336" MaxHeight="336" MinWidth="256" MinHeight="256" MinHue="{TemplateBinding MinHue}" MaxHue="{TemplateBinding MaxHue}" MinSaturation="{TemplateBinding MinSaturation}" MaxSaturation="{TemplateBinding MaxSaturation}" MinValue="{TemplateBinding MinValue}" MaxValue="{TemplateBinding MaxValue}" Shape="{TemplateBinding ColorSpectrumShape}" Components="{TemplateBinding ColorSpectrumComponents}" TabIndex="0" />
                <Grid x:Name="ColorPreviewRectangleGrid" Grid.Column="1" Grid.Row="0" Width="44" Margin="12,0,0,0">
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Rectangle VerticalAlignment="Stretch" Grid.ColumnSpan="2" Grid.RowSpan="2" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                    <Rectangle.Fill>
                      <ImageBrush x:Name="ColorPreviewRectangleCheckeredBackgroundImageBrush" />
                    </Rectangle.Fill>
                  </Rectangle>
                  <Rectangle x:Name="ColorPreviewRectangle" VerticalAlignment="Stretch" Grid.ColumnSpan="2" Grid.RowSpan="2" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                  <Rectangle x:Name="PreviousColorRectangle" VerticalAlignment="Stretch" Grid.ColumnSpan="2" Grid.Row="1" Visibility="Collapsed" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                  <Rectangle x:Name="BorderRectangle" Style="{StaticResource ColorPickerBorderStyle}" Grid.RowSpan="2" Grid.ColumnSpan="2" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                </Grid>
              </Grid>
              <Grid Margin="0,0,0,6" x:Name="ThirdDimensionSliderGrid" Grid.Row="1">
                <Rectangle x:Name="ThirdDimensionBackgroundRectangle" RenderTransformOrigin="0.5, 0.5" Height="12" VerticalAlignment="Center" RadiusX="{Binding Source={ThemeResource ColorPickerSliderCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ColorPickerSliderCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                  <Rectangle.Fill>
                    <LinearGradientBrush x:Name="ThirdDimensionSliderGradientBrush" />
                  </Rectangle.Fill>
                </Rectangle>
                <primitives:ColorPickerSlider x:Name="ThirdDimensionSlider" Minimum="0" Maximum="100" ColorChannel="Value" Orientation="Horizontal" Style="{StaticResource ColorPickerSliderStyle}" IsThumbToolTipEnabled="False" TabIndex="1" />
              </Grid>
              <Grid Margin="0,0,0,16" x:Name="AlphaSliderGrid" Grid.Row="2">
                <Rectangle x:Name="AlphaSliderCheckeredBackgroundRectangle" RenderTransformOrigin="0.5, 0.5" Height="12" VerticalAlignment="Center" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                  <Rectangle.Fill>
                    <ImageBrush x:Name="AlphaSliderCheckeredBackgroundImageBrush" />
                  </Rectangle.Fill>
                </Rectangle>
                <Rectangle x:Name="AlphaSliderBackgroundRectangle" RenderTransformOrigin="0.5, 0.5" Height="12" VerticalAlignment="Center" RadiusX="{Binding Source={ThemeResource ColorPickerSliderCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ColorPickerSliderCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                  <Rectangle.Fill>
                    <LinearGradientBrush x:Name="AlphaSliderGradientBrush" />
                  </Rectangle.Fill>
                </Rectangle>
                <primitives:ColorPickerSlider x:Name="AlphaSlider" Minimum="0" Maximum="100" ColorChannel="Alpha" Orientation="Horizontal" Style="{StaticResource ColorPickerSliderStyle}" IsThumbToolTipEnabled="False" TabIndex="2" />
              </Grid>
              <StackPanel x:Name="MoreEntriesPanel" Grid.Row="3" Margin="0,0,0,12">
                <ToggleButton x:Name="MoreButton" MinHeight="32" MinWidth="120" Padding="0" HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                  <ToggleButton.Content>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,5,0,7">
                      <TextBlock x:Name="MoreButtonLabel" VerticalAlignment="Center" />
                      <FontIcon x:Name="MoreGlyph" Margin="8,0,0,0" FontFamily="{ThemeResource SymbolThemeFontFamily}" Glyph="&#xE70D;" FontSize="12" />
                    </StackPanel>
                  </ToggleButton.Content>
                  <ToggleButton.Resources>
                    <ResourceDictionary>
                      <ResourceDictionary.ThemeDictionaries>
                        <ResourceDictionary x:Key="Default">
                          <SolidColorBrush x:Key="ToggleButtonBackground" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrush" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForeground" Color="{ThemeResource SystemBaseHighColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundPointerOver" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushPointerOver" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundPointerOver" Color="{ThemeResource SystemBaseMediumColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundPressed" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushPressed" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundPressed" Color="{ThemeResource SystemBaseMediumLowColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundDisabled" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushDisabled" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundDisabled" Color="{ThemeResource SystemBaseMediumLowColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundChecked" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushChecked" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundChecked" Color="{ThemeResource SystemBaseHighColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPointerOver" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPointerOver" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPointerOver" Color="{ThemeResource SystemBaseMediumColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPressed" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPressed" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPressed" Color="{ThemeResource SystemBaseMediumLowColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedDisabled" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedDisabled" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundCheckedDisabled" Color="{ThemeResource SystemBaseMediumLowColor}" />
                        </ResourceDictionary>
                        <ResourceDictionary x:Key="HighContrast">
                          <SolidColorBrush x:Key="ToggleButtonBackground" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrush" Color="{ThemeResource SystemColorButtonTextColor}" />
                          <SolidColorBrush x:Key="ToggleButtonForeground" Color="{ThemeResource SystemColorButtonTextColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundPointerOver" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushPointerOver" Color="{ThemeResource SystemColorHighlightColor}" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundPointerOver" Color="{ThemeResource SystemColorHighlightColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundPressed" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushPressed" Color="{ThemeResource SystemColorHighlightColor}" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundPressed" Color="{ThemeResource SystemColorHighlightColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundDisabled" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushDisabled" Color="{ThemeResource SystemColorGrayTextColor}" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundDisabled" Color="{ThemeResource SystemColorGrayTextColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundChecked" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushChecked" Color="{ThemeResource SystemColorButtonTextColor}" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundChecked" Color="{ThemeResource SystemColorButtonTextColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPointerOver" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPointerOver" Color="{ThemeResource SystemColorHighlightColor}" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPointerOver" Color="{ThemeResource SystemColorHighlightColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPressed" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPressed" Color="{ThemeResource SystemColorHighlightColor}" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPressed" Color="{ThemeResource SystemColorHighlightColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedDisabled" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedDisabled" Color="{ThemeResource SystemColorGrayTextColor}" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundCheckedDisabled" Color="{ThemeResource SystemColorGrayTextColor}" />
                        </ResourceDictionary>
                        <ResourceDictionary x:Key="Light">
                          <SolidColorBrush x:Key="ToggleButtonBackground" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrush" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForeground" Color="{ThemeResource SystemBaseHighColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundPointerOver" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushPointerOver" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundPointerOver" Color="{ThemeResource SystemBaseMediumColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundPressed" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushPressed" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundPressed" Color="{ThemeResource SystemBaseMediumLowColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundDisabled" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushDisabled" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundDisabled" Color="{ThemeResource SystemBaseMediumLowColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundChecked" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushChecked" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundChecked" Color="{ThemeResource SystemBaseHighColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPointerOver" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPointerOver" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPointerOver" Color="{ThemeResource SystemBaseMediumColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPressed" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPressed" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPressed" Color="{ThemeResource SystemBaseMediumLowColor}" />
                          <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedDisabled" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedDisabled" Color="Transparent" />
                          <SolidColorBrush x:Key="ToggleButtonForegroundCheckedDisabled" Color="{ThemeResource SystemBaseMediumLowColor}" />
                        </ResourceDictionary>
                      </ResourceDictionary.ThemeDictionaries>
                    </ResourceDictionary>
                  </ToggleButton.Resources>
                </ToggleButton>
                <Grid x:Name="TextEntryGrid" Visibility="Collapsed">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="5" />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <ComboBox Grid.Row="0" x:Name="ColorRepresentationComboBox" Width="120" TabIndex="4">
                    <ComboBoxItem x:Name="RGBComboBoxItem" Content="RGB" IsSelected="True" />
                    <ComboBoxItem x:Name="HSVComboBoxItem" Content="HSV" />
                  </ComboBox>
                  <StackPanel x:Name="ColorTextInputPanels" Grid.Row="1" Grid.ColumnSpan="3">
                    <StackPanel x:Name="ColorChannelTextInputPanel" HorizontalAlignment="Stretch">
                      <Grid x:Name="RgbPanel">
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="8" />
                          <ColumnDefinition x:Name="RgbTextLabelColumn" Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                          <RowDefinition />
                          <RowDefinition />
                          <RowDefinition />
                        </Grid.RowDefinitions>
                        <TextBox x:Name="RedTextBox" Grid.Row="0" Grid.Column="0" Width="120" MaxLength="3" Text="255" Margin="0,12,0,0" />
                        <TextBlock x:Name="RedLabel" Grid.Row="0" Grid.Column="2" Text="Red" VerticalAlignment="Center" Margin="0,12,0,0" />
                        <TextBox x:Name="GreenTextBox" Grid.Row="1" Grid.Column="0" Width="120" MaxLength="3" Text="255" Margin="0,12,0,0" />
                        <TextBlock x:Name="GreenLabel" Grid.Row="1" Grid.Column="2" Text="Green" VerticalAlignment="Center" Margin="0,12,0,0" />
                        <TextBox x:Name="BlueTextBox" Grid.Row="2" Grid.Column="0" Width="120" MaxLength="3" Text="255" Margin="0,12,0,0" />
                        <TextBlock x:Name="BlueLabel" Grid.Row="2" Grid.Column="2" Text="Blue" VerticalAlignment="Center" Margin="0,12,0,0" />
                      </Grid>
                      <Grid x:Name="HsvPanel" Visibility="Collapsed">
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="8" />
                          <ColumnDefinition x:Name="HsvTextLabelColumn" Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                          <RowDefinition />
                          <RowDefinition />
                          <RowDefinition />
                        </Grid.RowDefinitions>
                        <TextBox x:Name="HueTextBox" Grid.Row="0" Grid.Column="0" Width="120" MaxLength="3" Text="0" Margin="0,12,0,0" />
                        <TextBlock x:Name="HueLabel" Grid.Row="0" Grid.Column="2" Text="Hue" VerticalAlignment="Center" Margin="0,12,0,0" />
                        <TextBox x:Name="SaturationTextBox" Grid.Row="1" Grid.Column="0" Width="120" MaxLength="3" Text="0" Margin="0,12,0,0" />
                        <TextBlock x:Name="SaturationLabel" Grid.Row="1" Grid.Column="2" Text="Saturation" VerticalAlignment="Center" Margin="0,12,0,0" />
                        <TextBox x:Name="ValueTextBox" Grid.Row="2" Grid.Column="0" Width="120" MaxLength="3" Text="100" Margin="0,12,0,0" />
                        <TextBlock x:Name="ValueLabel" Grid.Row="2" Grid.Column="2" Text="Value" VerticalAlignment="Center" Margin="0,12,0,0" />
                      </Grid>
                    </StackPanel>
                    <Grid x:Name="AlphaPanel" Margin="0,12,0,0">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="8" />
                        <ColumnDefinition x:Name="AlphaTextLabelColumn" Width="*" />
                      </Grid.ColumnDefinitions>
                      <Grid.RowDefinitions>
                        <RowDefinition />
                      </Grid.RowDefinitions>
                      <TextBox x:Name="AlphaTextBox" Width="120" MaxLength="4" Text="100%" />
                      <TextBlock x:Name="AlphaLabel" Grid.Column="2" Text="Opacity" VerticalAlignment="Center" />
                    </Grid>
                  </StackPanel>
                  <TextBox x:Name="HexTextBox" Grid.Column="2" MaxLength="7" Text="#FFFFFF" Width="132" HorizontalAlignment="Right" VerticalAlignment="Top" />
                </Grid>
              </StackPanel>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ColorPickerSliderStyle" TargetType="primitives:ColorPickerSlider">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Slider">
          <Grid>
            <Grid.Resources>
              <Style x:Key="SliderThumbStyle" TargetType="Thumb">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Background" Value="{ThemeResource ColorPickerSliderThumbBackground}" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Thumb">
                      <Border BorderBrush="{ThemeResource SliderThumbBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{ThemeResource SliderOuterThumbBackground}" CornerRadius="{ThemeResource SliderThumbCornerRadius}">
                        <Ellipse x:Name="SliderInnerThumb" Fill="{TemplateBinding Background}" Width="{ThemeResource ColorPickerSliderInnerThumbWidth}" Height="{ThemeResource ColorPickerSliderInnerThumbHeight}" />
                      </Border>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </Grid.Resources>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="HorizontalThumb.Background" Value="{ThemeResource ColorPickerSliderThumbBackgroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HeaderContentPresenter.Foreground" Value="{ThemeResource ColorPickerHeaderContentDisabled}" />
                    <Setter Target="HorizontalThumb.Background" Value="{ThemeResource ColorPickerSliderThumbBackgroundDisabled}" />
                    <Setter Target="HorizontalTrackRect.Fill" Value="{ThemeResource ColorPickerSliderTrackFillDisabled}" />
                    <Setter Target="HorizontalDecreaseRect.Fill" Value="{ThemeResource ColorPickerSliderTrackFillDisabled}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="HorizontalThumb.Background" Value="{ThemeResource ColorPickerSliderThumbBackgroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusEngagementStates">
                <VisualState x:Name="FocusDisengaged" />
                <VisualState x:Name="FocusEngagedHorizontal">
                  <VisualState.Setters>
                    <Setter Target="SliderContainer.(Control.IsTemplateFocusTarget)" Value="False" />
                    <Setter Target="HorizontalThumb.(Control.IsTemplateFocusTarget)" Value="True" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="FocusEngagedVertical">
                  <VisualState.Setters>
                    <Setter Target="SliderContainer.(Control.IsTemplateFocusTarget)" Value="False" />
                    <Setter Target="VerticalThumb.(Control.IsTemplateFocusTarget)" Value="True" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter x:Name="HeaderContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Foreground="{ThemeResource SliderHeaderForeground}" FontWeight="{ThemeResource SliderHeaderThemeFontWeight}" Margin="{ThemeResource SliderHeaderThemeMargin}" TextWrapping="Wrap" Visibility="Collapsed" x:DeferLoadStrategy="Lazy" />
            <Grid x:Name="SliderContainer" Background="Transparent" Control.IsTemplateFocusTarget="True" Grid.Row="1" CornerRadius="{StaticResource ControlCornerRadius}">
              <Grid x:Name="HorizontalTemplate" MinHeight="32">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="{ThemeResource SliderPreContentMargin}" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="{ThemeResource SliderPostContentMargin}" />
                </Grid.RowDefinitions>
                <Rectangle x:Name="HorizontalTrackRect" Grid.ColumnSpan="3" Fill="Transparent" Height="{ThemeResource SliderTrackThemeHeight}" Grid.Row="1" Opacity="0" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                <Rectangle x:Name="HorizontalDecreaseRect" Fill="Transparent" Grid.Row="1" Opacity="0" />
                <Thumb x:Name="HorizontalThumb" AutomationProperties.AccessibilityView="Raw" Grid.Column="1" DataContext="{TemplateBinding Value}" Height="{ThemeResource SliderHorizontalThumbHeight}" Grid.Row="0" Grid.RowSpan="3" Style="{StaticResource SliderThumbStyle}" Width="{ThemeResource SliderHorizontalThumbWidth}">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="ToolTip" VerticalOffset="20" />
                  </ToolTipService.ToolTip>
                </Thumb>
              </Grid>
              <Grid x:Name="VerticalTemplate" MinWidth="32">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="{ThemeResource SliderPreContentMargin}" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="{ThemeResource SliderPostContentMargin}" />
                </Grid.ColumnDefinitions>
                <Rectangle x:Name="VerticalTrackRect" Grid.RowSpan="3" Fill="Transparent" Width="{ThemeResource SliderTrackThemeHeight}" Grid.Column="1" Opacity="0" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                <Rectangle x:Name="VerticalDecreaseRect" Fill="Transparent" Grid.Column="1" Grid.Row="2" Opacity="0" />
                <Thumb x:Name="VerticalThumb" AutomationProperties.AccessibilityView="Raw" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" DataContext="{TemplateBinding Value}" Height="{ThemeResource SliderHorizontalThumbHeight}" Style="{StaticResource SliderThumbStyle}" Width="{ThemeResource SliderHorizontalThumbWidth}">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="VerticalToolTip" VerticalOffset="20" />
                  </ToolTipService.ToolTip>
                </Thumb>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:ColorSpectrum">
    <Setter Property="ManipulationMode" Value="None" />
    <Setter Property="UseSystemFocusVisuals" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:ColorSpectrum">
          <Grid x:Name="LayoutRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="SelectionEllipse.Opacity" Value="0.8" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="PressedLarge">
                  <VisualState.Setters>
                    <Setter Target="SelectionEllipsePanel.Width" Value="48" />
                    <Setter Target="SelectionEllipsePanel.Height" Value="48" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionEllipseColor">
                <VisualState x:Name="SelectionEllipseLight" />
                <VisualState x:Name="SelectionEllipseDark">
                  <VisualState.Setters>
                    <Setter Target="FocusEllipse.Stroke" Value="{ThemeResource SystemControlBackgroundChromeWhiteBrush}" />
                    <Setter Target="SelectionEllipse.Stroke" Value="{ThemeResource SystemControlBackgroundChromeBlackHighBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ShapeSelected">
                <VisualState x:Name="BoxSelected" />
                <VisualState x:Name="RingSelected">
                  <VisualState.Setters>
                    <Setter Target="SpectrumRectangle.Visibility" Value="Collapsed" />
                    <Setter Target="SpectrumOverlayRectangle.Visibility" Value="Collapsed" />
                    <Setter Target="RectangleBorder.Visibility" Value="Collapsed" />
                    <Setter Target="SpectrumEllipse.Visibility" Value="Visible" />
                    <Setter Target="SpectrumOverlayEllipse.Visibility" Value="Visible" />
                    <Setter Target="EllipseBorder.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusEllipse.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="SizingGrid" HorizontalAlignment="Center" VerticalAlignment="Center">
              <Grid.Clip>
                <RectangleGeometry />
              </Grid.Clip>
              <Rectangle x:Name="SpectrumRectangle" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              <Rectangle x:Name="SpectrumOverlayRectangle" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              <Ellipse x:Name="SpectrumEllipse" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed" />
              <Ellipse x:Name="SpectrumOverlayEllipse" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed" />
              <Canvas x:Name="InputTarget" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Control.IsTemplateFocusTarget="True">
                <Grid x:Name="SelectionEllipsePanel" Width="16" Height="16">
                  <Ellipse x:Name="FocusEllipse" Stroke="{ThemeResource SystemControlBackgroundChromeBlackHighBrush}" Margin="-2" StrokeThickness="2" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed" />
                  <Ellipse x:Name="SelectionEllipse" Stroke="{ThemeResource SystemControlBackgroundChromeWhiteBrush}" StrokeThickness="2" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <ToolTipService.ToolTip>
                      <ToolTip x:Name="ColorNameToolTip" VerticalOffset="20" />
                    </ToolTipService.ToolTip>
                  </Ellipse>
                </Grid>
              </Canvas>
              <Rectangle x:Name="RectangleBorder" Style="{StaticResource ColorPickerBorderStyle}" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              <Ellipse x:Name="EllipseBorder" Style="{StaticResource ColorPickerBorderStyle}" IsHitTestVisible="False" Visibility="Collapsed" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:PersonPicture" BasedOn="{StaticResource DefaultPersonPictureStyle}" />
  <Style x:Key="DefaultPersonPictureStyle" TargetType="controls:PersonPicture">
    <Setter Property="Foreground" Value="{ThemeResource PersonPictureForegroundThemeBrush}" />
    <Setter Property="Width" Value="96" />
    <Setter Property="Height" Value="96" />
    <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="SemiBold" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:PersonPicture">
          <Grid x:Name="RootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <!-- Visual State when a Photo is available for display -->
                <VisualState x:Name="Photo">
                  <VisualState.Setters>
                    <Setter Target="PersonPictureEllipse.Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ActualImageBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <!-- Visual State when no Photo is available (but there are initials).-->
                <VisualState x:Name="Initials" />
                <VisualState x:Name="NoPhotoOrInitials">
                  <VisualState.Setters>
                    <Setter Target="InitialsTextBlock.FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
                    <!-- Placeholder symbol for 'Contact' (https://docs.microsoft.com/en-us/windows/uwp/design/style/segoe-ui-symbol-font) -->
                    <Setter Target="InitialsTextBlock.Text" Value="&#xE77B;" />
                  </VisualState.Setters>
                </VisualState>
                <!-- Visual State when in Group mode -->
                <VisualState x:Name="Group">
                  <VisualState.Setters>
                    <Setter Target="InitialsTextBlock.FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
                    <!-- Placeholder symbol for 'People' (https://docs.microsoft.com/en-us/windows/uwp/design/style/segoe-ui-symbol-font) -->
                    <Setter Target="InitialsTextBlock.Text" Value="&#xE716;" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BadgeStates">
                <VisualState x:Name="NoBadge" />
                <VisualState x:Name="BadgeWithoutImageSource">
                  <VisualState.Setters>
                    <Setter Target="BadgeGrid.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="BadgeWithImageSource">
                  <VisualState.Setters>
                    <Setter Target="BadgeGrid.Visibility" Value="Visible" />
                    <Setter Target="BadgingEllipse.Opacity" Value="{ThemeResource PersonPictureEllipseBadgeImageSourceStrokeOpacity}" />
                    <Setter Target="BadgingEllipse.Fill">
                      <Setter.Value>
                        <ImageBrush x:Name="BadgeImageBrush" Stretch="UniformToFill" />
                      </Setter.Value>
                    </Setter>
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Ellipse Fill="{ThemeResource PersonPictureEllipseFillThemeBrush}" Stroke="{ThemeResource PersonPictureEllipseFillStrokeBrush}" StrokeThickness="{ThemeResource PersonPictureEllipseStrokeThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
            <TextBlock x:Name="InitialsTextBlock" AutomationProperties.AccessibilityView="Raw" FontSize="40" FontFamily="{TemplateBinding FontFamily}" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" TextLineBounds="Tight" VerticalAlignment="Center" HorizontalAlignment="Center" IsTextScaleFactorEnabled="False" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ActualInitials}" />
            <Ellipse x:Name="PersonPictureEllipse" x:DeferLoadStrategy="Lazy" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" FlowDirection="LeftToRight" />
            <Grid x:Name="BadgeGrid" Visibility="Collapsed" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="{ThemeResource PersonPictureBadgeGridMargin}">
              <Ellipse x:Name="BadgingBackgroundEllipse" x:DeferLoadStrategy="Lazy" Opacity="{ThemeResource PersonPictureEllipseBadgeStrokeOpacity}" Fill="{ThemeResource PersonPictureEllipseBadgeFillThemeBrush}" Stroke="{ThemeResource PersonPictureEllipseBadgeStrokeThemeBrush}" StrokeThickness="{ThemeResource PersonPictureEllipseBadgeStrokeThickness}" />
              <Ellipse x:Name="BadgingEllipse" x:DeferLoadStrategy="Lazy" Opacity="0" FlowDirection="LeftToRight" />
              <TextBlock x:Name="BadgeNumberTextBlock" x:DeferLoadStrategy="Lazy" AutomationProperties.AccessibilityView="Raw" Foreground="{ThemeResource PersonPictureEllipseBadgeForegroundThemeBrush}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" TextLineBounds="Tight" VerticalAlignment="Center" HorizontalAlignment="Center" IsTextScaleFactorEnabled="False" />
              <!-- Default font family to "Segoe MDL2 Assets" -->
              <FontIcon x:Name="BadgeGlyphIcon" x:DeferLoadStrategy="Lazy" AutomationProperties.AccessibilityView="Raw" Foreground="{ThemeResource PersonPictureEllipseBadgeForegroundThemeBrush}" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontWeight="{TemplateBinding FontWeight}" VerticalAlignment="Center" HorizontalAlignment="Center" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:RefreshContainer" BasedOn="{StaticResource DefaultRefreshContainerStyle}" />
  <Style x:Key="DefaultRefreshContainerStyle" TargetType="controls:RefreshContainer">
    <Setter Property="Foreground" Value="{ThemeResource RefreshContainerForegroundBrush}" />
    <Setter Property="Background" Value="{ThemeResource RefreshContainerBackgroundBrush}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:RefreshContainer">
          <Grid x:Name="Root" Background="{TemplateBinding Background}">
            <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" Background="Transparent" />
            <Grid x:Name="RefreshVisualizerPresenter" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:RefreshVisualizer">
    <Setter Property="Background" Value="{ThemeResource RefreshVisualizerBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource RefreshVisualizerForeground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Height" Value="100" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:RefreshVisualizer">
          <Grid x:Name="Root" MinHeight="80" Background="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:MenuBar" BasedOn="{StaticResource DefaultMenuBarStyle}" />
  <Style x:Key="DefaultMenuBarStyle" TargetType="controls:MenuBar">
    <Setter Property="Background" Value="{ThemeResource MenuBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Height" Value="{StaticResource MenuBarHeight}" />
    <Setter Property="TabNavigation" Value="Once" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:MenuBar">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch">
            <ItemsControl x:Name="ContentRoot" VerticalAlignment="Stretch" HorizontalAlignment="Left" IsTabStop="False" TabNavigation="{TemplateBinding TabNavigation}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
            </ItemsControl>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:MenuBarItem">
    <Setter Property="Background" Value="{ThemeResource MenuBarItemBackground}" />
    <Setter Property="BorderThickness" Value="{ThemeResource MenuBarItemBorderThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MenuBarItemBorderBrush}" />
    <Setter Property="Margin" Value="{ThemeResource MenuBarItemMargin}" />
    <Setter Property="CornerRadius" Value="{ThemeResource ControlCornerRadius}" />
    <Setter Property="Title" Value="Item" />
    <Setter Property="IsTabStop" Value="True" />
    <Setter Property="ExitDisplayModeOnAccessKeyInvoked" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:MenuBarItem">
          <Grid x:Name="ContentRoot" Background="{TemplateBinding Background}" CornerRadius="{ThemeResource ControlCornerRadius}">
            <Grid.Resources>
              <!-- Stop the contained button from setting its background to anything but transparent -->
              <!-- Can't do this because of : Bug 16889199: StaticResource tag in a ControlTemplate hits asserts in CHK build-->
              <!--<StaticResource x:Key="ButtonBackground" ResourceKey="SystemControlTransparentBrush"/>
                            <StaticResource x:Key="ButtonBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush"/>
                            <StaticResource x:Key="ButtonBackgroundPressed" ResourceKey="SystemControlTransparentBrush"/>
                            <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="SystemControlTransparentBrush"/>-->
              <!-- Use SolidColorBrush instead for now. -->
              <SolidColorBrush x:Key="ButtonBackground" Color="Transparent" />
              <SolidColorBrush x:Key="ButtonBackgroundPointerOver" Color="Transparent" />
              <SolidColorBrush x:Key="ButtonBackgroundPressed" Color="Transparent" />
              <SolidColorBrush x:Key="ButtonBackgroundDisabled" Color="Transparent" />
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="Background.Background" Value="{ThemeResource MenuBarItemBackgroundPointerOver}" />
                    <Setter Target="Background.BorderBrush" Value="{ThemeResource MenuBarItemBorderBrushPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="Background.Background" Value="{ThemeResource MenuBarItemBackgroundPressed}" />
                    <Setter Target="Background.BorderBrush" Value="{ThemeResource MenuBarItemBorderBrushPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="Background.Background" Value="{ThemeResource MenuBarItemBackgroundSelected}" />
                    <Setter Target="Background.BorderBrush" Value="{ThemeResource MenuBarItemBorderBrushSelected}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="Background" Background="{TemplateBinding Background}" CornerRadius="{ThemeResource ControlCornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" />
            <Button x:Name="ContentButton" Content="{TemplateBinding Title}" Background="Transparent" BorderThickness="0" VerticalAlignment="Stretch" Padding="{StaticResource MenuBarItemButtonPadding}" IsTabStop="False" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="TreeViewItemDataTemplate">
    <Grid Height="44">
      <TextBlock Text="{Binding Content}" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{ThemeResource BodyTextBlockStyle}" />
    </Grid>
  </DataTemplate>
  <Style TargetType="controls:TreeView" BasedOn="{StaticResource DefaultTreeViewStyle}" />
  <Style x:Key="DefaultTreeViewStyle" TargetType="controls:TreeView">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="CanDragItems" Value="True" />
    <Setter Property="CanReorderItems" Value="True" />
    <Setter Property="AllowDrop" Value="True" />
    <Setter Property="ItemContainerTransitions">
      <Setter.Value>
        <TransitionCollection>
          <ContentThemeTransition />
          <ReorderThemeTransition />
          <EntranceThemeTransition IsStaggeringEnabled="False" />
        </TransitionCollection>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TreeView">
          <controls:TreeViewList x:Name="ListControl" Background="{TemplateBinding Background}" ItemTemplate="{TemplateBinding ItemTemplate}" ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}" ItemContainerTransitions="{TemplateBinding ItemContainerTransitions}" CanDragItems="{TemplateBinding CanDragItems}" AllowDrop="{TemplateBinding AllowDrop}" CanReorderItems="{TemplateBinding CanReorderItems}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:TreeViewItem" BasedOn="{StaticResource MUX_TreeViewItemStyle}" />
  <Style TargetType="controls:ScrollView" BasedOn="{StaticResource DefaultScrollViewStyle}" />
  <Style x:Key="DefaultScrollViewStyle" TargetType="controls:ScrollView">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="ContentOrientation" Value="Vertical" />
    <Setter Property="HorizontalScrollChainMode" Value="Auto" />
    <Setter Property="HorizontalScrollMode" Value="Enabled" />
    <Setter Property="HorizontalScrollRailMode" Value="Enabled" />
    <Setter Property="VerticalScrollChainMode" Value="Auto" />
    <Setter Property="VerticalScrollMode" Value="Enabled" />
    <Setter Property="VerticalScrollRailMode" Value="Enabled" />
    <Setter Property="ZoomChainMode" Value="Auto" />
    <Setter Property="ZoomMode" Value="Disabled" />
    <Setter Property="IgnoredInputKinds" Value="None" />
    <Setter Property="MinZoomFactor" Value="0.1" />
    <Setter Property="MaxZoomFactor" Value="10.0" />
    <Setter Property="HorizontalAnchorRatio" Value="0.0" />
    <Setter Property="VerticalAnchorRatio" Value="0.0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:ScrollView">
          <Grid x:Name="PART_Root">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ScrollingIndicatorStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="MouseIndicator" To="NoIndicator">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                        <DiscreteObjectKeyFrame KeyTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelay}">
                          <DiscreteObjectKeyFrame.Value>
                            <ScrollingIndicatorMode>None</ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                        <DiscreteObjectKeyFrame KeyTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelay}">
                          <DiscreteObjectKeyFrame.Value>
                            <ScrollingIndicatorMode>None</ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="TouchIndicator" To="NoIndicator">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                        <DiscreteObjectKeyFrame KeyTime="{ThemeResource ScrollViewScrollBarsNoTouchDuration}">
                          <DiscreteObjectKeyFrame.Value>
                            <ScrollingIndicatorMode>None</ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                        <DiscreteObjectKeyFrame KeyTime="{ThemeResource ScrollViewScrollBarsNoTouchDuration}">
                          <DiscreteObjectKeyFrame.Value>
                            <ScrollingIndicatorMode>None</ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="NoIndicator" />
                <VisualState x:Name="TouchIndicator">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <ScrollingIndicatorMode>TouchIndicator</ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <ScrollingIndicatorMode>TouchIndicator</ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseIndicator">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <ScrollingIndicatorMode>MouseIndicator</ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <ScrollingIndicatorMode>MouseIndicator</ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ScrollBarsSeparatorStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="ScrollBarsSeparatorExpanded" To="ScrollBarsSeparatorCollapsed">
                    <Storyboard>
                      <DoubleAnimation Duration="{ThemeResource ScrollViewScrollBarsSeparatorContractDuration}" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelay}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ScrollBarsSeparatorExpanded" To="ScrollBarsSeparatorCollapsedDisabled">
                    <Storyboard>
                      <DoubleAnimation Duration="{ThemeResource ScrollViewScrollBarsSeparatorContractDuration}" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelayDisabled}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="0" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="ScrollBarsSeparatorCollapsed" />
                <VisualState x:Name="ScrollBarsSeparatorCollapsedDisabled">
                  <Storyboard>
                    <DoubleAnimation Duration="{ThemeResource ScrollViewScrollBarsSeparatorContractDuration}" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelayDisabled}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ScrollBarsSeparatorExpanded">
                  <Storyboard>
                    <DoubleAnimation Duration="{ThemeResource ScrollViewScrollBarsSeparatorExpandDuration}" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorExpandDelay}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ScrollBarsSeparatorDisplayedWithoutAnimation">
                  <Storyboard>
                    <DoubleAnimation Duration="0" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorDisplayDelayWithoutAnimation}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ScrollBarsSeparatorExpandedWithoutAnimation">
                  <Storyboard>
                    <DoubleAnimation Duration="0" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorExpandDelayWithoutAnimation}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ScrollBarsSeparatorCollapsedWithoutAnimation">
                  <Storyboard>
                    <DoubleAnimation Duration="0" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelayWithoutAnimation}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <primitives:ScrollPresenter x:Name="PART_ScrollPresenter" Grid.ColumnSpan="2" Grid.RowSpan="2" Background="{TemplateBinding Background}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" ContentOrientation="{TemplateBinding ContentOrientation}" HorizontalScrollChainMode="{TemplateBinding HorizontalScrollChainMode}" HorizontalScrollMode="{TemplateBinding HorizontalScrollMode}" HorizontalScrollRailMode="{TemplateBinding HorizontalScrollRailMode}" VerticalScrollChainMode="{TemplateBinding VerticalScrollChainMode}" VerticalScrollMode="{TemplateBinding VerticalScrollMode}" VerticalScrollRailMode="{TemplateBinding VerticalScrollRailMode}" ZoomChainMode="{TemplateBinding ZoomChainMode}" ZoomMode="{TemplateBinding ZoomMode}" IgnoredInputKinds="{TemplateBinding IgnoredInputKinds}" MinZoomFactor="{TemplateBinding MinZoomFactor}" MaxZoomFactor="{TemplateBinding MaxZoomFactor}" HorizontalAnchorRatio="{TemplateBinding HorizontalAnchorRatio}" VerticalAnchorRatio="{TemplateBinding VerticalAnchorRatio}" />
            <Grid Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Padding="{ThemeResource ScrollViewScrollBarsMargin}">
              <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" />
            </Grid>
            <Grid Grid.Column="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Padding="{ThemeResource ScrollViewScrollBarsMargin}">
              <ScrollBar x:Name="PART_VerticalScrollBar" Orientation="Vertical" />
            </Grid>
            <Border x:Name="PART_ScrollBarsSeparator" Grid.Row="1" Grid.Column="1" Opacity="0" Background="{ThemeResource ScrollViewScrollBarsSeparatorBackground}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultSwipeControlStyle" TargetType="controls:SwipeControl">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}" />
    <Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:SwipeControl">
          <Grid x:Name="RootGrid">
            <Grid x:Name="SwipeContentRoot">
              <StackPanel x:Name="SwipeContentStackPanel" />
            </Grid>
            <Grid x:Name="ContentRoot">
              <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" AutomationProperties.AccessibilityView="Raw" />
              <Grid x:Name="InputEater" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:SwipeControl" BasedOn="{StaticResource DefaultSwipeControlStyle}" />
  <Style x:Key="DefaultTwoPaneViewStyle" TargetType="controls:TwoPaneView">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="MinWideModeWidth" Value="641" />
    <Setter Property="MinTallModeHeight" Value="641" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TwoPaneView">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ModeStates">
                <VisualState x:Name="ViewMode_LeftRight" />
                <VisualState x:Name="ViewMode_RightLeft">
                  <VisualState.Setters>
                    <Setter Target="PART_Pane1.(Grid.Column)" Value="2" />
                    <Setter Target="PART_Pane2.(Grid.Column)" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ViewMode_TopBottom">
                  <VisualState.Setters>
                    <Setter Target="PART_Pane1.(Grid.Column)" Value="0" />
                    <Setter Target="PART_Pane1.(Grid.Row)" Value="0" />
                    <Setter Target="PART_Pane2.(Grid.Column)" Value="0" />
                    <Setter Target="PART_Pane2.(Grid.Row)" Value="2" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ViewMode_BottomTop">
                  <VisualState.Setters>
                    <Setter Target="PART_Pane1.(Grid.Column)" Value="0" />
                    <Setter Target="PART_Pane1.(Grid.Row)" Value="2" />
                    <Setter Target="PART_Pane2.(Grid.Column)" Value="0" />
                    <Setter Target="PART_Pane2.(Grid.Row)" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ViewMode_OneOnly">
                  <VisualState.Setters>
                    <Setter Target="PART_Pane2.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ViewMode_TwoOnly">
                  <VisualState.Setters>
                    <Setter Target="PART_Pane1.Visibility" Value="Collapsed" />
                    <Setter Target="PART_Pane2.(Grid.Column)" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="PART_ColumnLeft" Width="Auto" />
              <ColumnDefinition x:Name="PART_ColumnMiddle" Width="0" />
              <ColumnDefinition x:Name="PART_ColumnRight" Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="PART_RowTop" Height="*" />
              <RowDefinition x:Name="PART_RowMiddle" Height="0" />
              <RowDefinition x:Name="PART_RowBottom" Height="0" />
            </Grid.RowDefinitions>
            <Border x:Name="PART_Pane1" Grid.Column="0" Child="{TemplateBinding Pane1}" />
            <Border x:Name="PART_Pane2" Grid.Column="2" Child="{TemplateBinding Pane2}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:TwoPaneView" BasedOn="{StaticResource DefaultTwoPaneViewStyle}" />
  <Style x:Key="SplitButtonStyle" TargetType="controls:SplitButton">
    <Setter Property="Background" Value="{ThemeResource SplitButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource SplitButtonForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource SplitButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource SplitButtonBorderThemeThickness}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="-1" />
    <Setter Property="IsTabStop" Value="True" />
    <Setter Property="Padding" Value="{ThemeResource ButtonPadding}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:SplitButton">
          <Grid x:Name="RootGrid" Background="Transparent" CornerRadius="{ThemeResource ControlCornerRadius}">
            <Grid.Resources>
              <!-- Override the style of the inner buttons so that they don't affect background/foreground/border colors -->
              <Style TargetType="Button">
                <Setter Property="Foreground" Value="{ThemeResource SplitButtonForeground}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="{ThemeResource SplitButtonBorderThemeThickness}" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
                <Setter Property="FontWeight" Value="Normal" />
                <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
                <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
                <Setter Property="FocusVisualMargin" Value="-3" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <Grid x:Name="RootGrid" Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="PointerOver">
                              <VisualState.Setters>
                                <Setter Target="ContentPresenter.(controls:AnimatedIcon.State)" Value="PointerOver" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                              <VisualState.Setters>
                                <Setter Target="ContentPresenter.(controls:AnimatedIcon.State)" Value="Pressed" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <VisualState.Setters>
                                <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource SplitButtonForegroundDisabled}" />
                                <Setter Target="RootGrid.Background" Value="{ThemeResource SplitButtonBackgroundDisabled}" />
                                <Setter Target="ContentPresenter.BorderBrush" Value="Transparent" />
                              </VisualState.Setters>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="ContentPresenter" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" local:AnimatedIcon.State="Normal" xmlns:local="using:Microsoft.UI.Xaml.Controls" />
                      </Grid>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushDisabled}" />
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="Transparent" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="Transparent" />
                    <Setter Target="RootGrid.Background" Value="Transparent" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="FlyoutOpen">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundSecondaryPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TouchPressed">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundSecondaryPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PrimaryPointerOver">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPointerOver}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPointerOver}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PrimaryPressed">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SecondaryPointerOver">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackground}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPointerOver}" />
                    <Setter Target="SecondaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushPointerOver}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SecondaryPressed">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackground}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundSecondaryPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                    <Setter Target="DividerBackgroundGrid.Background" Value="{ThemeResource SplitButtonBorderBrushCheckedDivider}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedFlyoutOpen">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                    <Setter Target="DividerBackgroundGrid.Background" Value="{ThemeResource SplitButtonBorderBrushCheckedDivider}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedTouchPressed">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                    <Setter Target="DividerBackgroundGrid.Background" Value="{ThemeResource SplitButtonBorderBrushCheckedDivider}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPrimaryPointerOver">
                  <VisualState.Setters>
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPointerOver}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPointerOver}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                    <Setter Target="DividerBackgroundGrid.Background" Value="{ThemeResource SplitButtonBorderBrushCheckedDivider}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPrimaryPressed">
                  <VisualState.Setters>
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                    <Setter Target="DividerBackgroundGrid.Background" Value="{ThemeResource SplitButtonBorderBrushCheckedDivider}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedSecondaryPointerOver">
                  <VisualState.Setters>
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPointerOver}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPointerOver}" />
                    <Setter Target="DividerBackgroundGrid.Background" Value="{ThemeResource SplitButtonBorderBrushCheckedDivider}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedSecondaryPressed">
                  <VisualState.Setters>
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                    <Setter Target="DividerBackgroundGrid.Background" Value="{ThemeResource SplitButtonBorderBrushCheckedDivider}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SecondaryButtonPlacementStates">
                <VisualState x:Name="SecondaryButtonRight" />
                <VisualState x:Name="SecondaryButtonSpan">
                  <VisualState.Setters>
                    <Setter Target="SecondaryButton.(Grid.Column)" Value="0" />
                    <Setter Target="SecondaryButton.(Grid.ColumnSpan)" Value="3" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="PrimaryButtonColumn" Width="*" MinWidth="{ThemeResource SplitButtonPrimaryButtonSize}" />
              <ColumnDefinition x:Name="Separator" Width="1" />
              <ColumnDefinition x:Name="SecondaryButtonColumn" Width="{ThemeResource SplitButtonSecondaryButtonSize}" />
            </Grid.ColumnDefinitions>
            <Grid x:Name="PrimaryBackgroundGrid" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" />
            <Grid x:Name="DividerBackgroundGrid" Width="1" Background="{ThemeResource SplitButtonBorderBrushDivider}" Grid.Column="1" />
            <Grid x:Name="SecondaryBackgroundGrid" Background="{TemplateBinding Background}" Grid.Column="2" />
            <Button x:Name="PrimaryButton" Grid.Column="0" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderThickness="0" BorderBrush="Transparent" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}" IsTabStop="False" AutomationProperties.AccessibilityView="Raw" />
            <Button x:Name="SecondaryButton" Grid.Column="2" Foreground="{ThemeResource SplitButtonForegroundSecondary}" Background="{TemplateBinding Background}" BorderThickness="0" BorderBrush="Transparent" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Padding="0,0,12,0" IsTabStop="False" AutomationProperties.AccessibilityView="Raw">
              <Button.Content>
                <controls:AnimatedIcon Height="12" Width="12" VerticalAlignment="Center" HorizontalAlignment="Right" AutomationProperties.AccessibilityView="Raw">
                  <animatedvisuals:AnimatedChevronDownSmallVisualSource />
                  <controls:AnimatedIcon.FallbackIconSource>
                    <controls:FontIconSource FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="8" Glyph="&#xE96E;" IsTextScaleFactorEnabled="False" />
                  </controls:AnimatedIcon.FallbackIconSource>
                </controls:AnimatedIcon>
              </Button.Content>
            </Button>
            <Grid x:Name="Border" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:SplitButton" BasedOn="{StaticResource SplitButtonStyle}" />
  <Style TargetType="controls:ToggleSplitButton" BasedOn="{StaticResource SplitButtonStyle}" />
  <Style x:Key="DefaultDropDownButtonStyle" TargetType="controls:DropDownButton">
    <Setter Property="Background" Value="{ThemeResource ButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource ButtonForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource ButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource ButtonBorderThemeThickness}" />
    <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{ThemeResource ControlCornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBorderBrushPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ChevronIcon" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource DropDownButtonForegroundSecondaryPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                  <VisualState.Setters>
                    <Setter Target="ChevronIcon.(controls:AnimatedIcon.State)" Value="PointerOver" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBorderBrushPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ChevronIcon" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource DropDownButtonForegroundSecondaryPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                  <VisualState.Setters>
                    <Setter Target="ChevronIcon.(controls:AnimatedIcon.State)" Value="Pressed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBorderBrushDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ChevronIcon" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                  <VisualState.Setters>
                    <!-- DisabledVisual Should be handled by the control, not the animated icon. -->
                    <Setter Target="ChevronIcon.(controls:AnimatedIcon.State)" Value="Normal" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
            <local:AnimatedIcon x:Name="ChevronIcon" Grid.Column="1" Margin="8,0,0,0" Width="12" Height="12" Foreground="{ThemeResource DropDownButtonForegroundSecondary}" AutomationProperties.AccessibilityView="Raw" local:AnimatedIcon.State="Normal" xmlns:local="using:Microsoft.UI.Xaml.Controls">
              <animatedvisuals:AnimatedChevronDownSmallVisualSource />
              <local:AnimatedIcon.FallbackIconSource>
                <local:FontIconSource FontSize="8" FontFamily="{ThemeResource SymbolThemeFontFamily}" Glyph="&#xE96E;" IsTextScaleFactorEnabled="False" />
              </local:AnimatedIcon.FallbackIconSource>
            </local:AnimatedIcon>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:DropDownButton" BasedOn="{StaticResource DefaultDropDownButtonStyle}" />
  <Style TargetType="controls:RadioButtons" BasedOn="{StaticResource DefaultRadioButtonsStyle}" />
  <Style x:Key="DefaultRadioButtonsStyle" TargetType="controls:RadioButtons">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:RadioButtons">
          <StackPanel>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HeaderContentPresenter.Foreground" Value="{ThemeResource RadioButtonsHeaderForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter x:Name="HeaderContentPresenter" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Foreground="{ThemeResource RadioButtonsHeaderForeground}" Margin="{ThemeResource RadioButtonsTopHeaderMargin}" />
            <controls:ItemsRepeater x:Name="InnerRepeater">
              <controls:ItemsRepeater.Layout>
                <primitives:ColumnMajorUniformToLargestGridLayout MaxColumns="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxColumns}" ColumnSpacing="{ThemeResource RadioButtonsColumnSpacing}" RowSpacing="{ThemeResource RadioButtonsRowSpacing}" />
              </controls:ItemsRepeater.Layout>
            </controls:ItemsRepeater>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="RadioButton" BasedOn="{StaticResource DefaultRadioButtonStyle}" />
  <Style TargetType="controls:TeachingTip" BasedOn="{StaticResource DefaultTeachingTipStyle}" />
  <Style x:Key="DefaultTeachingTipStyle" TargetType="controls:TeachingTip">
    <Setter Property="Background" Value="{ThemeResource TeachingTipBackgroundBrush}" />
    <Setter Property="Foreground" Value="{ThemeResource TeachingTipForegroundBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource TeachingTipBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource TeachingTipContentBorderThicknessUntargeted}" />
    <Setter Property="ActionButtonStyle" Value="{ThemeResource DefaultButtonStyle}" />
    <Setter Property="CloseButtonStyle" Value="{ThemeResource DefaultButtonStyle}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TeachingTip">
          <Border x:Name="Container" HorizontalAlignment="Left" VerticalAlignment="Top" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="LightDismissStates">
                <VisualState x:Name="LightDismiss">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Fill" Value="{ThemeResource TeachingTipTransientBackground}" />
                    <Setter Target="ContentRootGrid.Background" Value="{ThemeResource TeachingTipTransientBackground}" />
                    <Setter Target="MainContentPresenter.Background" Value="{ThemeResource TeachingTipTransientBackground}" />
                    <Setter Target="HeroContentBorder.Background" Value="{ThemeResource TeachingTipTransientBackground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NormalDismiss" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonsStates">
                <VisualState x:Name="NoButtonsVisible">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Collapsed" />
                    <Setter Target="ActionButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ActionButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Collapsed" />
                    <Setter Target="ActionButton.Visibility" Value="Visible" />
                    <Setter Target="ActionButton.(Grid.ColumnSpan)" Value="2" />
                    <Setter Target="ActionButton.Margin" Value="{ThemeResource TeachingTipButtonPanelMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CloseButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Visible" />
                    <Setter Target="CloseButton.Margin" Value="{ThemeResource TeachingTipButtonPanelMargin}" />
                    <Setter Target="CloseButton.(Grid.Column)" Value="0" />
                    <Setter Target="CloseButton.(Grid.ColumnSpan)" Value="2" />
                    <Setter Target="ActionButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="BothButtonsVisible">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Visible" />
                    <Setter Target="CloseButton.Margin" Value="{ThemeResource TeachingTipRightButtonMargin}" />
                    <Setter Target="ActionButton.Visibility" Value="Visible" />
                    <Setter Target="ActionButton.(Grid.Column)" Value="0" />
                    <Setter Target="ActionButton.Margin" Value="{ThemeResource TeachingTipLeftButtonMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ContentStates">
                <VisualState x:Name="Content">
                  <VisualState.Setters>
                    <Setter Target="MainContentPresenter.Margin" Value="{StaticResource TeachingTipMainContentPresentMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NoContent">
                  <VisualState.Setters>
                    <Setter Target="MainContentPresenter.Margin" Value="{StaticResource TeachingTipMainContentAbsentMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CloseButtonLocations">
                <VisualState x:Name="HeaderCloseButton">
                  <VisualState.Setters>
                    <Setter Target="TitlesStackPanel.Margin" Value="{StaticResource TeachingTipTitleStackPanelMarginWithHeaderCloseButton}" />
                    <Setter Target="AlternateCloseButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="FooterCloseButton">
                  <VisualState.Setters>
                    <Setter Target="TitlesStackPanel.Margin" Value="{StaticResource TeachingTipTitleStackPanelMarginWithFooterCloseButton}" />
                    <Setter Target="AlternateCloseButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="Icon">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Margin" Value="{StaticResource TeachingTipIconPresenterMarginWithIcon}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NoIcon">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Margin" Value="{StaticResource TeachingTipIconPresenterMarginWithoutIcon}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeroContentPlacementStates">
                <VisualState x:Name="HeroContentTop">
                  <VisualState.Setters>
                    <Setter Target="HeroContentBorder.(Grid.Row)" Value="0" />
                    <Setter Target="HeroContentBorder.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopCornerRadiusFilterConverter}, FallbackValue=0}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="HeroContentBottom">
                  <VisualState.Setters>
                    <Setter Target="HeroContentBorder.(Grid.Row)" Value="2" />
                    <Setter Target="HeroContentBorder.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomCornerRadiusFilterConverter}, FallbackValue=0}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PlacementStates">
                <VisualState x:Name="Top">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10, 20,0" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="4" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Center" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginTop}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Bottom">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,10 10,0 20,10" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="0" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Center" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Top" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginBottom}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Left">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10 0,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="4" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Center" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginLeft}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Right">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="10,0 0,10 10,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="0" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Center" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginRight}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TopRight">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10 20,0" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="4" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginTop}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TopLeft">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10 20,0" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="4" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginTop}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="BottomRight">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,10 10,0 20,10" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="0" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Top" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginBottom}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="BottomLeft">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,10 10,0 20,10" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="0" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Top" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginBottom}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="LeftTop">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10 0,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="4" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginLeft}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="LeftBottom">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10 0,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="4" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Top" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginLeft}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="RightTop">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="10,0 0,10 10,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="0" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginRight}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="RightBottom">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="10,0 0,10 10,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="0" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Top" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginRight}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Center">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10, 20,0" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="4" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Center" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginTop}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Untargeted">
                  <VisualState.Setters>
                    <Setter Target="TailPolygon.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TitleBlockStates">
                <VisualState x:Name="ShowTitleTextBlock">
                  <VisualState.Setters>
                    <Setter Target="TitleTextBlock.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CollapseTitleTextBlock" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="SubtitleBlockStates">
                <VisualState x:Name="ShowSubtitleTextBlock">
                  <VisualState.Setters>
                    <Setter Target="SubtitleTextBlock.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CollapseSubtitleTextBlock" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid MinHeight="{ThemeResource TeachingTipMinHeight}" MinWidth="{ThemeResource TeachingTipMinWidth}" MaxHeight="{ThemeResource TeachingTipMaxHeight}" MaxWidth="{ThemeResource TeachingTipMaxWidth}" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{StaticResource TeachingTipTailShortSideLength}" />
                <ColumnDefinition Width="{StaticResource TeachingTipTailMargin}" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="{StaticResource TeachingTipTailMargin}" />
                <ColumnDefinition Width="{StaticResource TeachingTipTailShortSideLength}" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="{StaticResource TeachingTipTailShortSideLength}" />
                <RowDefinition Height="{StaticResource TeachingTipTailMargin}" />
                <RowDefinition Height="*" />
                <RowDefinition Height="{StaticResource TeachingTipTailMargin}" />
                <RowDefinition Height="{StaticResource TeachingTipTailShortSideLength}" />
              </Grid.RowDefinitions>
              <Grid x:Name="TailOcclusionGrid" HorizontalAlignment="Left" VerticalAlignment="Top" MinHeight="{ThemeResource TeachingTipMinHeight}" MinWidth="{ThemeResource TeachingTipMinWidth}" MaxHeight="{ThemeResource TeachingTipMaxHeight}" MaxWidth="{ThemeResource TeachingTipMaxWidth}" Grid.ColumnSpan="5" Grid.RowSpan="5">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="{StaticResource TeachingTipTailShortSideLength}" />
                  <ColumnDefinition Width="{StaticResource TeachingTipTailMargin}" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="{StaticResource TeachingTipTailMargin}" />
                  <ColumnDefinition Width="{StaticResource TeachingTipTailShortSideLength}" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="{StaticResource TeachingTipTailShortSideLength}" />
                  <RowDefinition Height="{StaticResource TeachingTipTailMargin}" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="{StaticResource TeachingTipTailMargin}" />
                  <RowDefinition Height="{StaticResource TeachingTipTailShortSideLength}" />
                </Grid.RowDefinitions>
                <Grid x:Name="ContentRootGrid" AutomationProperties.LandmarkType="Custom" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" FlowDirection="{TemplateBinding FlowDirection}" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" Grid.RowSpan="3" CornerRadius="{ThemeResource OverlayCornerRadius}">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <Border x:Name="HeroContentBorder" Grid.Row="0" Child="{TemplateBinding HeroContent}" Background="{TemplateBinding Background}" />
                  <Grid x:Name="NonHeroContentRootGrid" Grid.Row="1">
                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                      <StackPanel Margin="{StaticResource TeachingTipContentMargin}">
                        <Grid Grid.Row="0">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                          </Grid.ColumnDefinitions>
                          <ContentPresenter x:Name="IconPresenter" Grid.Column="0" Foreground="{TemplateBinding Foreground}">
                            <Border Child="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.IconElement}" />
                          </ContentPresenter>
                          <StackPanel x:Name="TitlesStackPanel" Grid.Column="1">
                            <TextBlock x:Name="TitleTextBlock" Grid.Column="0" Text="{TemplateBinding Title}" TextWrapping="WrapWholeWords" Foreground="{ThemeResource TeachingTipTitleForegroundBrush}" FontFamily="{TemplateBinding FontFamily}" FontWeight="SemiBold" Visibility="Collapsed" />
                            <TextBlock x:Name="SubtitleTextBlock" Grid.Row="1" Text="{TemplateBinding Subtitle}" Foreground="{ThemeResource TeachingTipSubtitleForegroundBrush}" FontFamily="{TemplateBinding FontFamily}" TextWrapping="WrapWholeWords" Visibility="Collapsed" />
                          </StackPanel>
                        </Grid>
                        <ContentPresenter x:Name="MainContentPresenter" Grid.Row="1" Content="{TemplateBinding Content}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}" FontStretch="{TemplateBinding FontStretch}" />
                        <Grid Grid.Row="2">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                          </Grid.ColumnDefinitions>
                          <Button x:Name="ActionButton" HorizontalAlignment="Stretch" Style="{TemplateBinding ActionButtonStyle}" Command="{TemplateBinding ActionButtonCommand}" CommandParameter="{TemplateBinding ActionButtonCommandParameter}">
                            <ContentPresenter TextWrapping="WrapWholeWords" Content="{TemplateBinding ActionButtonContent}" />
                          </Button>
                          <Button x:Name="CloseButton" HorizontalAlignment="Stretch" Style="{TemplateBinding CloseButtonStyle}" Command="{TemplateBinding CloseButtonCommand}" CommandParameter="{TemplateBinding CloseButtonCommandParameter}" Grid.Column="1">
                            <ContentPresenter TextWrapping="WrapWholeWords" Content="{TemplateBinding CloseButtonContent}" />
                          </Button>
                        </Grid>
                      </StackPanel>
                    </ScrollViewer>
                    <Button x:Name="AlternateCloseButton" Style="{ThemeResource AlternateCloseButtonStyle}" />
                  </Grid>
                </Grid>
                <Polygon x:Name="TailPolygon" Fill="{TemplateBinding Background}" HorizontalAlignment="Left" VerticalAlignment="Top" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{StaticResource TeachingTipBorderThickness}" />
              </Grid>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:TabView" BasedOn="{StaticResource DefaultTabViewStyle}" />
  <Style x:Key="DefaultTabViewStyle" TargetType="controls:TabView">
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Padding" Value="{ThemeResource TabViewHeaderPadding}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Background" Value="{ThemeResource TabViewBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TabView">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup>
                <VisualState x:Name="NormalBottomBorderLine" />
                <VisualState x:Name="SingleBottomBorderLine">
                  <VisualState.Setters>
                    <Setter Target="LeftBottomBorderLine.(Grid.ColumnSpan)" Value="4" />
                    <Setter Target="RightBottomBorderLine.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="TabContainerGrid" Background="{TemplateBinding Background}" XYFocusKeyboardNavigation="Enabled">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="2" x:Name="LeftContentColumn" />
                <ColumnDefinition Width="Auto" x:Name="TabColumn" />
                <ColumnDefinition Width="Auto" x:Name="AddButtonColumn" />
                <ColumnDefinition Width="*" x:Name="RightContentColumn" />
              </Grid.ColumnDefinitions>
              <Border x:Name="LeftBottomBorderLine" BorderBrush="{ThemeResource TabViewBorderBrush}" BorderThickness="1" Height="1" VerticalAlignment="Bottom" />
              <Border x:Name="RightBottomBorderLine" BorderBrush="{ThemeResource TabViewBorderBrush}" BorderThickness="1" Height="1" Grid.Column="2" Grid.ColumnSpan="2" VerticalAlignment="Bottom" />
              <ContentPresenter Grid.Column="0" x:Name="LeftContentPresenter" Content="{TemplateBinding TabStripHeader}" ContentTemplate="{TemplateBinding TabStripHeaderTemplate}" />
              <primitives:TabViewListView Grid.Column="1" x:Name="TabListView" Padding="{TemplateBinding Padding}" CanReorderItems="{TemplateBinding CanReorderTabs}" CanDragItems="{TemplateBinding CanDragTabs}" AllowDrop="{TemplateBinding AllowDropTabs}" ItemsSource="{TemplateBinding TabItemsSource}" ItemTemplate="{TemplateBinding TabItemTemplate}" ItemTemplateSelector="{TemplateBinding TabItemTemplateSelector}" />
              <Border Visibility="{Binding IsAddTabButtonVisible, RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="2" Padding="{ThemeResource TabViewItemAddButtonContainerPadding}" VerticalAlignment="Bottom">
                <Button x:Name="AddButton" HorizontalAlignment="Center" VerticalAlignment="Center" Content="&#xE710;" IsTextScaleFactorEnabled="False" Command="{TemplateBinding AddTabButtonCommand}" CommandParameter="{TemplateBinding AddTabButtonCommandParameter}" Style="{ThemeResource TabViewButtonStyle}" HighContrastAdjustment="None" />
              </Border>
              <ContentPresenter Grid.Column="3" x:Name="RightContentPresenter" HorizontalAlignment="Stretch" Content="{TemplateBinding TabStripFooter}" ContentTemplate="{TemplateBinding TabStripFooterTemplate}" />
            </Grid>
            <ContentPresenter x:Name="TabContentPresenter" Grid.Row="1" Background="{ThemeResource TabViewItemHeaderBackgroundSelected}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:TabViewListView">
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="TabNavigation" Value="Once" />
    <Setter Property="IsSwipeEnabled" Value="False" />
    <Setter Property="SingleSelectionFollowsFocus" Value="False" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Enabled" />
    <Setter Property="ScrollViewer.IsHorizontalRailEnabled" Value="False" />
    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Disabled" />
    <Setter Property="ScrollViewer.IsVerticalRailEnabled" Value="False" />
    <Setter Property="ScrollViewer.ZoomMode" Value="Disabled" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="ScrollViewer.BringIntoViewOnFocusChange" Value="True" />
    <Setter Property="ItemContainerTransitions">
      <Setter.Value>
        <TransitionCollection>
          <AddDeleteThemeTransition />
          <ContentThemeTransition />
          <ReorderThemeTransition />
          <EntranceThemeTransition IsStaggeringEnabled="False" />
        </TransitionCollection>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <ItemsStackPanel Orientation="Horizontal" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:TabViewListView">
          <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{ThemeResource ControlCornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup>
                <VisualState x:Name="LeftBottomBorderLineNormal" />
                <VisualState x:Name="LeftBottomBorderLineShort">
                  <VisualState.Setters>
                    <Setter Target="LeftBottomBorderLine.Width" Value="2" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="RightBottomBorderLineNormal" />
                <VisualState x:Name="RightBottomBorderLineShort">
                  <VisualState.Setters>
                    <Setter Target="RightBottomBorderLine.Width" Value="2" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="NormalBottomBorderLine" />
                <VisualState x:Name="NoBottomBorderLine">
                  <VisualState.Setters>
                    <Setter Target="LeftBottomBorderLine.Visibility" Value="Collapsed" />
                    <Setter Target="RightBottomBorderLine.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ScrollViewer x:Name="ScrollViewer" Grid.Column="1" AutomationProperties.AccessibilityView="Raw" BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsHorizontalScrollChainingEnabled="{TemplateBinding ScrollViewer.IsHorizontalScrollChainingEnabled}" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" IsVerticalScrollChainingEnabled="{TemplateBinding ScrollViewer.IsVerticalScrollChainingEnabled}" TabNavigation="{TemplateBinding TabNavigation}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}" Style="{StaticResource TabScrollViewerStyle}">
              <ItemsPresenter x:Name="TabsItemsPresenter" Padding="{TemplateBinding Padding}">
                <ItemsPresenter.Header>
                  <Grid Width="4">
                    <Border x:Name="LeftBottomBorderLine" BorderBrush="{ThemeResource TabViewBorderBrush}" BorderThickness="1" Width="4" Height="1" VerticalAlignment="Bottom" HorizontalAlignment="Left" />
                  </Grid>
                </ItemsPresenter.Header>
                <ItemsPresenter.Footer>
                  <Grid Width="4">
                    <Border x:Name="RightBottomBorderLine" BorderBrush="{ThemeResource TabViewBorderBrush}" BorderThickness="1" Width="4" Height="1" VerticalAlignment="Bottom" HorizontalAlignment="Right" />
                  </Grid>
                </ItemsPresenter.Footer>
              </ItemsPresenter>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Name="TabScrollViewerStyle" TargetType="ScrollViewer">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ScrollViewer">
          <Border x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup>
                <VisualState x:Name="NormalBottomBorderLine" />
                <VisualState x:Name="NoBottomBorderLine">
                  <VisualState.Setters>
                    <Setter Target="LeftBottomBorderLine.Visibility" Value="Collapsed" />
                    <Setter Target="RightBottomBorderLine.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="2" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Border x:Name="LeftBottomBorderLine" BorderBrush="{ThemeResource TabViewBorderBrush}" BorderThickness="1" Height="1" VerticalAlignment="Bottom" />
              <Border x:Name="RightBottomBorderLine" BorderBrush="{ThemeResource TabViewBorderBrush}" BorderThickness="1" Height="1" Grid.Column="2" VerticalAlignment="Bottom" />
              <Border x:Name="ScrollDecreaseButtonContainer" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Padding="{ThemeResource TabViewItemLeftScrollButtonContainerPadding}" VerticalAlignment="Bottom">
                <RepeatButton x:Name="ScrollDecreaseButton" AutomationProperties.AccessibilityView="Raw" IsTabStop="False" Delay="50" Interval="100" HighContrastAdjustment="None" Content="&#xEDD9;" Style="{ThemeResource TabViewScrollButtonStyle}" />
              </Border>
              <ScrollContentPresenter x:Name="ScrollContentPresenter" Grid.Column="1" Padding="1,0,0,0" TabFocusNavigation="Once" />
              <Border x:Name="ScrollIncreaseButtonContainer" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="2" Padding="{ThemeResource TabViewItemRightScrollButtonContainerPadding}" VerticalAlignment="Bottom">
                <RepeatButton x:Name="ScrollIncreaseButton" AutomationProperties.AccessibilityView="Raw" IsTabStop="False" Delay="50" Interval="100" HighContrastAdjustment="None" Content="&#xEDDA;" Style="{ThemeResource TabViewScrollButtonStyle}" />
              </Border>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabViewCloseButtonStyle" TargetType="Button">
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <Setter Property="FontSize" Value="{ThemeResource TabViewItemHeaderCloseFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="Width" Value="{ThemeResource TabViewItemHeaderCloseButtonWidth}" />
    <Setter Property="Height" Value="{ThemeResource TabViewItemHeaderCloseButtonHeight}" />
    <Setter Property="Background" Value="{ThemeResource TabViewItemHeaderCloseButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource TabViewItemHeaderCloseButtonForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource TabViewItemHeaderCloseButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource TabViewItemHeaderCloseButtonBorderThickness}" />
    <Setter Property="FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" CornerRadius="{ThemeResource ControlCornerRadius}" ContentTransitions="{TemplateBinding ContentTransitions}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewItemHeaderCloseButtonBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewItemHeaderCloseButtonForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewItemHeaderCloseButtonBorderBrushPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewItemHeaderCloseButtonBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewItemHeaderCloseButtonForegroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewItemHeaderCloseButtonBorderBrushPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </ContentPresenter>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Name="TabViewButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource TabViewButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource TabViewButtonForeground}" />
    <Setter Property="FontSize" Value="{ThemeResource TabViewItemAddButtonFontSize}" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <Setter Property="Width" Value="{ThemeResource TabViewItemAddButtonWidth}" />
    <Setter Property="Height" Value="{ThemeResource TabViewItemAddButtonHeight}" />
    <Setter Property="BorderThickness" Value="{ThemeResource TabViewButtonBorderThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource TabViewButtonBorderBrush}" />
    <Setter Property="FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{ThemeResource ControlCornerRadius}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonBorderBrushPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonForegroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonBorderBrushPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonBorderBrushDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </ContentPresenter>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:TabViewItem">
    <Setter Property="Background" Value="{ThemeResource TabViewItemHeaderBackground}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="MinHeight" Value="{ThemeResource TabViewItemMinHeight}" />
    <Setter Property="BorderThickness" Value="{ThemeResource TabViewItemBorderThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource TabViewItemBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TabViewItem">
          <Grid x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" UseLayoutRounding="False">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="LeftColumn" Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition x:Name="RightColumn" Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RenderTransform>
              <ScaleTransform x:Name="LayoutRootScale" />
            </Grid.RenderTransform>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackgroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundPointerOver}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemIconForegroundPointerOver}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderPointerOverCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderPointerOverCloseButtonForeground}" />
                    <Setter Target="TabSeparator.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackgroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundPressed}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemIconForegroundPressed}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderPressedCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderPressedCloseButtonForeground}" />
                    <Setter Target="TabSeparator.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="BottomBorderLine.Visibility" Value="Collapsed" />
                    <Setter Target="RightRadiusRenderArc.Visibility" Value="Visible" />
                    <Setter Target="LeftRadiusRenderArc.Visibility" Value="Visible" />
                    <Setter Target="SelectedBackgroundPath.Visibility" Value="Visible" />
                    <Setter Target="SelectedBackgroundPath.Fill" Value="{ThemeResource TabViewItemHeaderBackgroundSelected}" />
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackground}" />
                    <Setter Target="TabContainer.Margin" Value="{ThemeResource TabViewSelectedItemHeaderMargin}" />
                    <Setter Target="TabContainer.BorderBrush" Value="{ThemeResource TabViewSelectedItemBorderBrush}" />
                    <Setter Target="TabContainer.BorderThickness" Value="{ThemeResource TabViewSelectedItemBorderThickness}" />
                    <Setter Target="TabContainer.Padding" Value="{ThemeResource TabViewSelectedItemHeaderPadding}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundSelected}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemIconForegroundSelected}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonForeground}" />
                    <Setter Target="LayoutRoot.Background" Value="Transparent" />
                    <Setter Target="ContentPresenter.FontWeight" Value="SemiBold" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="BottomBorderLine.Visibility" Value="Collapsed" />
                    <Setter Target="RightRadiusRenderArc.Visibility" Value="Visible" />
                    <Setter Target="LeftRadiusRenderArc.Visibility" Value="Visible" />
                    <Setter Target="SelectedBackgroundPath.Visibility" Value="Visible" />
                    <Setter Target="SelectedBackgroundPath.Fill" Value="{ThemeResource TabViewItemHeaderBackgroundSelected}" />
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackground}" />
                    <Setter Target="TabContainer.Margin" Value="{ThemeResource TabViewSelectedItemHeaderMargin}" />
                    <Setter Target="TabContainer.BorderBrush" Value="{ThemeResource TabViewSelectedItemBorderBrush}" />
                    <Setter Target="TabContainer.BorderThickness" Value="{ThemeResource TabViewSelectedItemBorderThickness}" />
                    <Setter Target="TabContainer.Padding" Value="{ThemeResource TabViewSelectedItemHeaderPadding}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundSelected}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemIconForegroundSelected}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonForeground}" />
                    <Setter Target="LayoutRoot.Background" Value="Transparent" />
                    <Setter Target="ContentPresenter.FontWeight" Value="SemiBold" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="BottomBorderLine.Visibility" Value="Collapsed" />
                    <Setter Target="RightRadiusRenderArc.Visibility" Value="Visible" />
                    <Setter Target="LeftRadiusRenderArc.Visibility" Value="Visible" />
                    <Setter Target="SelectedBackgroundPath.Visibility" Value="Visible" />
                    <Setter Target="SelectedBackgroundPath.Fill" Value="{ThemeResource TabViewItemHeaderBackgroundSelected}" />
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackground}" />
                    <Setter Target="TabContainer.Margin" Value="{ThemeResource TabViewSelectedItemHeaderMargin}" />
                    <Setter Target="TabContainer.BorderBrush" Value="{ThemeResource TabViewSelectedItemBorderBrush}" />
                    <Setter Target="TabContainer.BorderThickness" Value="{ThemeResource TabViewSelectedItemBorderThickness}" />
                    <Setter Target="TabContainer.Padding" Value="{ThemeResource TabViewSelectedItemHeaderPadding}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundSelected}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemIconForegroundSelected}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonForeground}" />
                    <Setter Target="LayoutRoot.Background" Value="Transparent" />
                    <Setter Target="ContentPresenter.FontWeight" Value="SemiBold" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackgroundDisabled}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundDisabled}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewButtonForegroundDisabled}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderDisabledCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderDisabledCloseButtonForeground}" />
                    <Setter Target="CloseButton.BorderBrush" Value="{ThemeResource TabViewItemHeaderCloseButtonBorderBrushDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DataVirtualizationStates">
                <VisualState x:Name="DataAvailable" />
                <VisualState x:Name="DataPlaceholder" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ReorderHintStates">
                <VisualState x:Name="NoReorderHint" />
                <VisualState x:Name="BottomReorderHint">
                  <Storyboard>
                    <DragOverThemeAnimation Direction="Bottom" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="TopReorderHint">
                  <Storyboard>
                    <DragOverThemeAnimation Direction="Top" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="RightReorderHint">
                  <Storyboard>
                    <DragOverThemeAnimation Direction="Right" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="LeftReorderHint">
                  <Storyboard>
                    <DragOverThemeAnimation Direction="Left" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.2" To="NoReorderHint" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DragStates">
                <VisualState x:Name="NotDragging" />
                <VisualState x:Name="Dragging">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="Opacity" To="{ThemeResource ListViewItemDragThemeOpacity}" Duration="0" />
                    <DragItemThemeAnimation TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DraggingTarget" />
                <VisualState x:Name="MultipleDraggingPrimary" />
                <VisualState x:Name="MultipleDraggingSecondary" />
                <VisualState x:Name="DraggedPlaceholder" />
                <VisualState x:Name="Reordering">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="Opacity" To="{ThemeResource ListViewItemReorderThemeOpacity}" Duration="0:0:0.240" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ReorderingTarget">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="Opacity" To="{ThemeResource ListViewItemReorderTargetThemeOpacity}" Duration="0:0:0.240" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultipleReorderingPrimary" />
                <VisualState x:Name="ReorderedPlaceholder">
                  <Storyboard>
                    <FadeOutThemeAnimation TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DragOver">
                  <Storyboard>
                    <DropTargetItemThemeAnimation TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.2" To="NotDragging" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="Icon" />
                <VisualState x:Name="NoIcon">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabWidthModes">
                <VisualState x:Name="StandardWidth" />
                <VisualState x:Name="Compact">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Margin" Value="0,0,0,0" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="IconColumn.Width" Value="{ThemeResource TabViewItemHeaderIconSize}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CloseIconStates">
                <VisualState x:Name="CloseButtonVisible" />
                <VisualState x:Name="CloseButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="ForegroundNotSet" />
                <VisualState x:Name="ForegroundSet">
                  <VisualState.Setters>
                    <Setter Target="IconControl.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="NormalBottomBorderLine" />
                <VisualState x:Name="LeftOfSelectedTab">
                  <VisualState.Setters>
                    <Setter Target="BottomBorderLine.Margin" Value="0,0,2,0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="RightOfSelectedTab">
                  <VisualState.Setters>
                    <Setter Target="BottomBorderLine.Margin" Value="2,0,0,0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NoBottomBorderLine">
                  <VisualState.Setters>
                    <Setter Target="BottomBorderLine.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="BottomBorderLine" BorderBrush="{ThemeResource TabViewBorderBrush}" BorderThickness="1" Height="1" Grid.ColumnSpan="3" VerticalAlignment="Bottom" />
            <Path x:Name="LeftRadiusRenderArc" x:Load="False" Fill="{ThemeResource TabViewBorderBrush}" VerticalAlignment="Bottom" Visibility="Collapsed" Margin="-4,0,0,0" Height="4" Width="4" Data="M4 0C4 1.19469 3.47624 2.26706 2.64582 3H0C1.65685 3 3 1.65685 3 0H4Z" />
            <Path x:Name="RightRadiusRenderArc" x:Load="False" Grid.Column="2" Visibility="Collapsed" Fill="{ThemeResource TabViewBorderBrush}" VerticalAlignment="Bottom" Margin="0,0,-4,0" Height="4" Width="4" Data="M0 0C0 1.19469 0.523755 2.26706 1.35418 3H4C2.34315 3 1 1.65685 1 0H0Z" />
            <!-- This Path wrapped in a Canvas to prevent an infinite loop in calculating its width. -->
            <Canvas>
              <Path x:Name="SelectedBackgroundPath" x:Load="False" Grid.ColumnSpan="3" Fill="{ThemeResource TabViewItemHeaderBackgroundSelected}" VerticalAlignment="Bottom" Margin="-4,0,-4,0" Visibility="Collapsed" Data="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TabViewTemplateSettings.TabGeometry}" />
            </Canvas>
            <Border x:Name="TabSeparator" HorizontalAlignment="Right" Width="1" Grid.Column="1" BorderBrush="{ThemeResource TabViewItemSeparator}" BorderThickness="1" Margin="{ThemeResource TabViewItemSeparatorMargin}" />
            <Grid x:Name="TabContainer" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True" Padding="{ThemeResource TabViewItemHeaderPadding}" CornerRadius="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopCornerRadiusFilterConverter}}" FocusVisualMargin="{TemplateBinding FocusVisualMargin}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="IconColumn" Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconBox" MaxWidth="{ThemeResource TabViewItemHeaderIconSize}" MaxHeight="{ThemeResource TabViewItemHeaderIconSize}" Margin="{ThemeResource TabViewItemHeaderIconMargin}">
                <ContentControl x:Name="IconControl" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TabViewTemplateSettings.IconElement}" IsTabStop="False" Foreground="{ThemeResource TabViewItemIconForeground}" HighContrastAdjustment="None" />
              </Viewbox>
              <!-- If we template bind the ContentPresenter's Content property to the TabViewItem.Header property
                                 we unfortunately run into the following issue if the header is [null] or empty:
                                 The TabViewItem.Content property will be implictly bound to the Content property of the ContentPresenter.
                                 To prevent this, we explicitly set a default empty content here and update the content in code behind. -->
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontWeight="{TemplateBinding FontWeight}" FontSize="{ThemeResource TabViewItemHeaderFontSize}" Foreground="{ThemeResource TabViewItemHeaderForeground}" OpticalMarginAlignment="TrimSideBearings" HighContrastAdjustment="None" />
              <Button x:Name="CloseButton" Grid.Column="2" Margin="{ThemeResource TabViewItemHeaderCloseMargin}" Content="&#xE711;" IsTextScaleFactorEnabled="False" IsTabStop="False" Style="{ThemeResource TabViewCloseButtonStyle}" HighContrastAdjustment="None" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Name="TabViewScrollButtonStyle" TargetType="RepeatButton">
    <Setter Property="Background" Value="{ThemeResource TabViewScrollButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource TabViewScrollButtonForeground}" />
    <Setter Property="FontSize" Value="{ThemeResource TabViewItemScrollButonFontSize}" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <Setter Property="Width" Value="{ThemeResource TabViewItemScrollButtonWidth}" />
    <Setter Property="Height" Value="{ThemeResource TabViewItemScrollButtonHeight}" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <Setter Property="BorderThickness" Value="{ThemeResource TabViewButtonBorderThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource TabViewScrollButtonBorderBrush}" />
    <Setter Property="FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RepeatButton">
          <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{ThemeResource ControlCornerRadius}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewScrollButtonBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewScrollButtonForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewScrollButtonBorderBrushPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewScrollButtonBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewScrollButtonForegroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewScrollButtonBorderBrushPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewScrollButtonBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewScrollButtonForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewScrollButtonBorderBrushDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </ContentPresenter>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:ProgressBar">
    <Setter Property="Foreground" Value="{ThemeResource ProgressBarForeground}" />
    <Setter Property="Background" Value="{ThemeResource ProgressBarBackground}" />
    <Setter Property="BorderThickness" Value="{ThemeResource ProgressBarBorderThemeThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource ProgressBarBorderBrush}" />
    <Setter Property="MinHeight" Value="{StaticResource ProgressBarMinHeight}" />
    <Setter Property="Maximum" Value="100" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:ProgressBar">
          <Grid x:Name="LayoutRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Updating" To="Determinate">
                    <Storyboard>
                      <RepositionThemeAnimation TargetName="DeterminateProgressBarIndicator" FromHorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.IndicatorLengthDelta}" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="UpdatingError" To="Error">
                    <Storyboard>
                      <RepositionThemeAnimation TargetName="DeterminateProgressBarIndicator" FromHorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.IndicatorLengthDelta}" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Paused" To="Determinate">
                    <Storyboard>
                      <ColorAnimation Storyboard.TargetName="DeterminateProgressBarIndicator" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{TemplateBinding Foreground}" Duration="0:0:0.167" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Error" To="Determinate">
                    <Storyboard>
                      <ColorAnimation Storyboard.TargetName="DeterminateProgressBarIndicator" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{TemplateBinding Foreground}" Duration="0:0:0.167" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Indeterminate" To="Determinate">
                    <Storyboard>
                      <FadeInThemeAnimation TargetName="IndeterminateProgressBarIndicator" />
                      <FadeInThemeAnimation TargetName="IndeterminateProgressBarIndicator2" />
                      <FadeInThemeAnimation TargetName="ProgressBarTrack" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="IndeterminatePaused" To="Indeterminate">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="IndeterminateProgressBarIndicator">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                        <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" KeySpline="1.0, 0.0, 1.0, 1.0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ProgressBarTrack" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                        <SplineDoubleKeyFrame KeyTime="0:0:0" Value="0" KeySpline="1.0, 0.0, 1.0, 1.0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" KeySpline="1.0, 0.0, 1.0, 1.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="IndeterminateError" To="Indeterminate">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="IndeterminateProgressBarIndicator">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                        <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" KeySpline="1.0, 0.0, 1.0, 1.0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ProgressBarTrack" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                        <SplineDoubleKeyFrame KeyTime="0:0:0" Value="0" KeySpline="1.0, 0.0, 1.0, 1.0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" KeySpline="1.0, 0.0, 1.0, 1.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Determinate" />
                <VisualState x:Name="Updating" />
                <VisualState x:Name="UpdatingError">
                  <VisualState.Setters>
                    <Setter Target="DeterminateProgressBarIndicator.(Shape.Fill).(SolidColorBrush.Color)" Value="{ThemeResource ProgressBarErrorForegroundColor}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Error">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="DeterminateProgressBarIndicator" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{ThemeResource ProgressBarErrorForegroundColor}" Duration="0:0:0.167" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Paused">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="DeterminateProgressBarIndicator" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{ThemeResource ProgressBarPausedForegroundColor}" Duration="0:0:0.167" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate">
                  <VisualState.Setters>
                    <Setter Target="IndeterminateProgressBarIndicator.Opacity" Value="1" />
                    <Setter Target="IndeterminateProgressBarIndicator2.Opacity" Value="1" />
                    <Setter Target="ProgressBarTrack.Opacity" Value="0" />
                  </VisualState.Setters>
                  <Storyboard RepeatBehavior="Forever">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationStartPosition}" />
                      <SplineDoubleKeyFrame KeyTime="0:0:1.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:2" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0.75" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" />
                      <SplineDoubleKeyFrame KeyTime="0:0:2" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationEndPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="IndeterminateError">
                  <VisualState.Setters>
                    <Setter Target="IndeterminateProgressBarIndicator.Opacity" Value="0" />
                    <Setter Target="DeterminateProgressBarIndicator.Opacity" Value="0" />
                    <Setter Target="IndeterminateProgressBarIndicator2.Opacity" Value="1" />
                    <Setter Target="ProgressBarTrack.Opacity" Value="0" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <SplineDoubleKeyFrame KeyTime="0:0:0.167" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationEndPosition}" KeySpline="1.0, 1.0, 0.0, 1.0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.167" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" KeySpline="1.0, 1.0, 0.0, 1.0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.75" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationMidPosition}" KeySpline="0.0, 0.0, 0.0, 1.0" />
                    </DoubleAnimationUsingKeyFrames>
                    <ColorAnimation Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{ThemeResource ProgressBarErrorForegroundColor}" Duration="0:0:0.167" />
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ProgressBarTrack" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <SplineDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" KeySpline="0.0, 0.0, 0.0, 1.0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.75" Value="0" KeySpline="0.0, 0.0, 0.0, 1.0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="IndeterminatePaused">
                  <VisualState.Setters>
                    <Setter Target="IndeterminateProgressBarIndicator.Opacity" Value="0" />
                    <Setter Target="DeterminateProgressBarIndicator.Opacity" Value="0" />
                    <Setter Target="IndeterminateProgressBarIndicator2.Opacity" Value="1" />
                    <Setter Target="ProgressBarTrack.Opacity" Value="0" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <SplineDoubleKeyFrame KeyTime="0:0:0.167" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationEndPosition}" KeySpline="1.0, 1.0, 0.0, 1.0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.167" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" KeySpline="1.0, 1.0, 0.0, 1.0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.75" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationMidPosition}" KeySpline="0.0, 0.0, 0.0, 1.0" />
                    </DoubleAnimationUsingKeyFrames>
                    <ColorAnimation Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{ThemeResource ProgressBarPausedForegroundColor}" Duration="0:0:0.167" />
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ProgressBarTrack" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <SplineDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" KeySpline="0.0, 0.0, 0.0, 1.0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.75" Value="0" KeySpline="0.0, 0.0, 0.0, 1.0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="ProgressBarRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="{StaticResource ProgressBarCornerRadius}">
              <Border Clip="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ClipRect}">
                <Grid Height="{TemplateBinding MinHeight}">
                  <Rectangle x:Name="ProgressBarTrack" Fill="{TemplateBinding Background}" Height="{ThemeResource ProgressBarTrackHeight}" Width="{TemplateBinding Width}" VerticalAlignment="Center" RadiusX="{Binding Source={StaticResource ProgressBarTrackCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={StaticResource ProgressBarTrackCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                    <Rectangle.RenderTransform>
                      <CompositeTransform />
                    </Rectangle.RenderTransform>
                  </Rectangle>
                  <Rectangle x:Name="DeterminateProgressBarIndicator" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" RadiusX="{Binding Source={StaticResource ProgressBarCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={StaticResource ProgressBarCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                  <Rectangle x:Name="IndeterminateProgressBarIndicator" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" Opacity="0" RadiusX="{Binding Source={StaticResource ProgressBarCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={StaticResource ProgressBarCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                    <Rectangle.RenderTransform>
                      <CompositeTransform />
                    </Rectangle.RenderTransform>
                  </Rectangle>
                  <Rectangle x:Name="IndeterminateProgressBarIndicator2" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" Opacity="0" RadiusX="{Binding Source={StaticResource ProgressBarCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={StaticResource ProgressBarCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                    <Rectangle.RenderTransform>
                      <CompositeTransform />
                    </Rectangle.RenderTransform>
                  </Rectangle>
                </Grid>
              </Border>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:ProgressRing">
    <Setter Property="Foreground" Value="{ThemeResource ProgressRingForegroundThemeBrush}" />
    <Setter Property="Background" Value="{ThemeResource ProgressRingBackgroundThemeBrush}" />
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="MinHeight" Value="16" />
    <Setter Property="MinWidth" Value="16" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Width" Value="32" />
    <Setter Property="Height" Value="32" />
    <Setter Property="Maximum" Value="100" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:ProgressRing">
          <Grid x:Name="LayoutRoot" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Inactive">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Opacity" Value="0" />
                    <Setter Target="LottiePlayer.(AutomationProperties.AccessibilityView)" Value="Raw" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="DeterminateActive" />
                <VisualState x:Name="Active" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- AnimatedVisualPlayer for Lottie -->
            <controls:AnimatedVisualPlayer x:Name="LottiePlayer" AutoPlay="false" Stretch="fill" Opacity="1" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:NumberBox">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="SelectionHighlightColor" Value="{ThemeResource TextControlSelectionHighlightColor}" />
    <Setter Property="BorderThickness" Value="{ThemeResource TextControlBorderThemeThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource TextControlBorderBrush}" />
    <Setter Property="Padding" Value="{ThemeResource TextControlThemePadding}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NumberBox">
          <Grid Height="{TemplateBinding Height}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HeaderContentPresenter.Foreground" Value="{ThemeResource TextControlHeaderForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SpinButtonStates">
                <VisualState x:Name="SpinButtonsCollapsed" />
                <VisualState x:Name="SpinButtonsVisible">
                  <VisualState.Setters>
                    <Setter Target="DownSpinButton.Visibility" Value="Visible" />
                    <Setter Target="UpSpinButton.Visibility" Value="Visible" />
                    <Setter Target="InputEater.Visibility" Value="Visible" />
                    <Setter Target="InputBox.MinWidth" Value="{ThemeResource NumberBoxMinWidth}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SpinButtonsPopup">
                  <VisualState.Setters>
                    <Setter Target="InputBox.Style" Value="{StaticResource NumberBoxTextBoxStyle}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="UpSpinButtonEnabledStates">
                <VisualState x:Name="UpSpinButtonEnabled" />
                <VisualState x:Name="UpSpinButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="UpSpinButton.IsEnabled" Value="False" />
                    <Setter Target="PopupUpSpinButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DownSpinButtonEnabledStates">
                <VisualState x:Name="DownSpinButtonEnabled" />
                <VisualState x:Name="DownSpinButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="DownSpinButton.IsEnabled" Value="False" />
                    <Setter Target="PopupDownSpinButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.Resources>
              <ResourceDictionary>
                <ResourceDictionary.ThemeDictionaries>
                  <ResourceDictionary x:Key="Light">
                    <StaticResource x:Key="RepeatButtonBackground" ResourceKey="TextControlButtonBackground" />
                    <StaticResource x:Key="RepeatButtonBackgroundPointerOver" ResourceKey="TextControlButtonBackgroundPointerOver" />
                    <StaticResource x:Key="RepeatButtonBackgroundPressed" ResourceKey="TextControlButtonBackgroundPressed" />
                    <StaticResource x:Key="RepeatButtonForeground" ResourceKey="TextControlButtonForeground" />
                    <StaticResource x:Key="RepeatButtonForegroundPointerOver" ResourceKey="TextControlButtonForegroundPointerOver" />
                    <StaticResource x:Key="RepeatButtonForegroundPressed" ResourceKey="TextControlButtonForegroundPressed" />
                    <StaticResource x:Key="RepeatButtonBorderBrush" ResourceKey="TextControlButtonBorderBrush" />
                    <StaticResource x:Key="RepeatButtonBorderBrushPointerOver" ResourceKey="TextControlButtonBorderBrushPointerOver" />
                    <StaticResource x:Key="RepeatButtonBorderBrushPressed" ResourceKey="TextControlButtonBorderBrushPressed" />
                    <StaticResource x:Key="RepeatButtonBorderBrushDisabled" ResourceKey="TextControlButtonBorderBrush" />
                  </ResourceDictionary>
                  <ResourceDictionary x:Key="Dark">
                    <StaticResource x:Key="RepeatButtonBackground" ResourceKey="TextControlButtonBackground" />
                    <StaticResource x:Key="RepeatButtonBackgroundPointerOver" ResourceKey="TextControlButtonBackgroundPointerOver" />
                    <StaticResource x:Key="RepeatButtonBackgroundPressed" ResourceKey="TextControlButtonBackgroundPressed" />
                    <StaticResource x:Key="RepeatButtonForeground" ResourceKey="TextControlButtonForeground" />
                    <StaticResource x:Key="RepeatButtonForegroundPointerOver" ResourceKey="TextControlButtonForegroundPointerOver" />
                    <StaticResource x:Key="RepeatButtonForegroundPressed" ResourceKey="TextControlButtonForegroundPressed" />
                    <StaticResource x:Key="RepeatButtonBorderBrush" ResourceKey="TextControlButtonBorderBrush" />
                    <StaticResource x:Key="RepeatButtonBorderBrushPointerOver" ResourceKey="TextControlButtonBorderBrushPointerOver" />
                    <StaticResource x:Key="RepeatButtonBorderBrushPressed" ResourceKey="TextControlButtonBorderBrushPressed" />
                    <StaticResource x:Key="RepeatButtonBorderBrushDisabled" ResourceKey="TextControlButtonBorderBrush" />
                  </ResourceDictionary>
                  <ResourceDictionary x:Key="HighContrast">
                    <StaticResource x:Key="RepeatButtonBackground" ResourceKey="TextControlButtonBackground" />
                    <StaticResource x:Key="RepeatButtonBackgroundPointerOver" ResourceKey="TextControlButtonBackgroundPointerOver" />
                    <StaticResource x:Key="RepeatButtonBackgroundPressed" ResourceKey="TextControlButtonBackgroundPressed" />
                    <StaticResource x:Key="RepeatButtonForeground" ResourceKey="TextControlButtonForeground" />
                    <StaticResource x:Key="RepeatButtonForegroundPointerOver" ResourceKey="TextControlButtonForegroundPointerOver" />
                    <StaticResource x:Key="RepeatButtonForegroundPressed" ResourceKey="TextControlButtonForegroundPressed" />
                    <StaticResource x:Key="RepeatButtonBorderBrush" ResourceKey="TextControlButtonBorderBrush" />
                    <StaticResource x:Key="RepeatButtonBorderBrushPointerOver" ResourceKey="TextControlButtonBorderBrushPointerOver" />
                    <StaticResource x:Key="RepeatButtonBorderBrushPressed" ResourceKey="TextControlButtonBorderBrushPressed" />
                    <StaticResource x:Key="RepeatButtonBorderBrushDisabled" ResourceKey="TextControlButtonBorderBrush" />
                  </ResourceDictionary>
                </ResourceDictionary.ThemeDictionaries>
              </ResourceDictionary>
            </Grid.Resources>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="HeaderContentPresenter" Grid.ColumnSpan="3" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" FontWeight="Normal" Foreground="{ThemeResource TextControlHeaderForeground}" Margin="{ThemeResource TextBoxTopHeaderMargin}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" TextWrapping="Wrap" VerticalAlignment="Top" Visibility="Collapsed" x:DeferLoadStrategy="Lazy" />
            <TextBox x:Name="InputBox" Grid.Row="1" Grid.ColumnSpan="3" Style="{StaticResource NumberBoxTextBoxStyle}" InputScope="{TemplateBinding InputScope}" PlaceholderText="{TemplateBinding PlaceholderText}" SelectionHighlightColor="{TemplateBinding SelectionHighlightColor}" TextReadingOrder="{TemplateBinding TextReadingOrder}" PreventKeyboardDisplayOnProgrammaticFocus="{TemplateBinding PreventKeyboardDisplayOnProgrammaticFocus}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" FontFamily="{TemplateBinding FontFamily}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" TextAlignment="{TemplateBinding TextAlignment}" />
            <Popup x:Name="UpDownPopup" Grid.Row="1" Grid.Column="1" VerticalOffset="{ThemeResource NumberBoxPopupVerticalOffset}" HorizontalOffset="{ThemeResource NumberBoxPopupHorizonalOffset}" HorizontalAlignment="Left">
              <Grid x:Name="PopupContentRoot" Padding="6" Background="{ThemeResource NumberBoxPopupBackground}" BorderBrush="{ThemeResource NumberBoxPopupBorderBrush}" BorderThickness="{ThemeResource NumberBoxPopupBorderThickness}" CornerRadius="{ThemeResource OverlayCornerRadius}">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid.Resources>
                  <ResourceDictionary>
                    <ResourceDictionary.ThemeDictionaries>
                      <ResourceDictionary x:Key="Light">
                        <StaticResource x:Key="RepeatButtonBackground" ResourceKey="TextControlButtonBackground" />
                        <StaticResource x:Key="RepeatButtonBackgroundPointerOver" ResourceKey="TextControlButtonBackgroundPointerOver" />
                        <StaticResource x:Key="RepeatButtonBackgroundPressed" ResourceKey="TextControlButtonBackgroundPressed" />
                        <StaticResource x:Key="RepeatButtonForeground" ResourceKey="TextControlButtonForeground" />
                        <StaticResource x:Key="RepeatButtonForegroundPointerOver" ResourceKey="TextControlButtonForegroundPointerOver" />
                        <StaticResource x:Key="RepeatButtonForegroundPressed" ResourceKey="TextControlButtonForegroundPressed" />
                        <StaticResource x:Key="RepeatButtonBorderBrush" ResourceKey="TextControlButtonBorderBrush" />
                        <StaticResource x:Key="RepeatButtonBorderBrushPointerOver" ResourceKey="TextControlButtonBorderBrushPointerOver" />
                        <StaticResource x:Key="RepeatButtonBorderBrushPressed" ResourceKey="TextControlButtonBorderBrushPressed" />
                        <StaticResource x:Key="RepeatButtonBorderBrushDisabled" ResourceKey="TextControlButtonBorderBrush" />
                      </ResourceDictionary>
                      <ResourceDictionary x:Key="Dark">
                        <StaticResource x:Key="RepeatButtonBackground" ResourceKey="TextControlButtonBackground" />
                        <StaticResource x:Key="RepeatButtonBackgroundPointerOver" ResourceKey="TextControlButtonBackgroundPointerOver" />
                        <StaticResource x:Key="RepeatButtonBackgroundPressed" ResourceKey="TextControlButtonBackgroundPressed" />
                        <StaticResource x:Key="RepeatButtonForeground" ResourceKey="TextControlButtonForeground" />
                        <StaticResource x:Key="RepeatButtonForegroundPointerOver" ResourceKey="TextControlButtonForegroundPointerOver" />
                        <StaticResource x:Key="RepeatButtonForegroundPressed" ResourceKey="TextControlButtonForegroundPressed" />
                        <StaticResource x:Key="RepeatButtonBorderBrush" ResourceKey="TextControlButtonBorderBrush" />
                        <StaticResource x:Key="RepeatButtonBorderBrushPointerOver" ResourceKey="TextControlButtonBorderBrushPointerOver" />
                        <StaticResource x:Key="RepeatButtonBorderBrushPressed" ResourceKey="TextControlButtonBorderBrushPressed" />
                        <StaticResource x:Key="RepeatButtonBorderBrushDisabled" ResourceKey="TextControlButtonBorderBrush" />
                      </ResourceDictionary>
                      <ResourceDictionary x:Key="HighContrast">
                        <StaticResource x:Key="RepeatButtonBackground" ResourceKey="TextControlButtonBackground" />
                        <StaticResource x:Key="RepeatButtonBackgroundPointerOver" ResourceKey="TextControlButtonBackgroundPointerOver" />
                        <StaticResource x:Key="RepeatButtonBackgroundPressed" ResourceKey="TextControlButtonBackgroundPressed" />
                        <StaticResource x:Key="RepeatButtonForeground" ResourceKey="TextControlButtonForeground" />
                        <StaticResource x:Key="RepeatButtonForegroundPointerOver" ResourceKey="TextControlButtonForegroundPointerOver" />
                        <StaticResource x:Key="RepeatButtonForegroundPressed" ResourceKey="TextControlButtonForegroundPressed" />
                        <StaticResource x:Key="RepeatButtonBorderBrush" ResourceKey="TextControlButtonBorderBrush" />
                        <StaticResource x:Key="RepeatButtonBorderBrushPointerOver" ResourceKey="TextControlButtonBorderBrushPointerOver" />
                        <StaticResource x:Key="RepeatButtonBorderBrushPressed" ResourceKey="TextControlButtonBorderBrushPressed" />
                        <StaticResource x:Key="RepeatButtonBorderBrushDisabled" ResourceKey="TextControlButtonBorderBrush" />
                      </ResourceDictionary>
                    </ResourceDictionary.ThemeDictionaries>
                  </ResourceDictionary>
                </Grid.Resources>
                <RepeatButton x:Name="PopupUpSpinButton" Style="{StaticResource NumberBoxPopupSpinButtonStyle}" Margin="0,0,0,4" Content="&#xE70E;" />
                <RepeatButton x:Name="PopupDownSpinButton" Style="{StaticResource NumberBoxPopupSpinButtonStyle}" Grid.Row="1" Content="&#xE70D;" />
              </Grid>
            </Popup>
            <Button x:Name="InputEater" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Visibility="Collapsed" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="4,0,0,0" IsTabStop="False" AutomationProperties.AccessibilityView="Raw">
              <Button.Template>
                <ControlTemplate TargetType="Button">
                  <Grid Background="Transparent" />
                </ControlTemplate>
              </Button.Template>
            </Button>
            <RepeatButton x:Name="UpSpinButton" Grid.Row="1" Grid.Column="1" Visibility="Collapsed" FontSize="{TemplateBinding FontSize}" Content="&#xE70E;" Style="{StaticResource NumberBoxSpinButtonStyle}" Margin="4" />
            <RepeatButton x:Name="DownSpinButton" Grid.Row="1" Grid.Column="2" Visibility="Collapsed" FontSize="{TemplateBinding FontSize}" Content="&#xE70D;" Style="{StaticResource NumberBoxSpinButtonStyle}" Margin="0,4,4,4" />
            <ContentPresenter x:Name="DescriptionPresenter" Grid.Row="2" Grid.ColumnSpan="3" Content="{TemplateBinding Description}" Foreground="{ThemeResource SystemControlDescriptionTextForegroundBrush}" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Name="NumberBoxSpinButtonStyle" TargetType="RepeatButton" BasedOn="{StaticResource DefaultRepeatButtonStyle}">
    <Style.Setters>
      <Setter Property="IsTabStop" Value="False" />
      <Setter Property="MinWidth" Value="32" />
      <Setter Property="Padding" Value="0" />
      <Setter Property="VerticalAlignment" Value="Stretch" />
      <Setter Property="BorderThickness" Value="{ThemeResource NumberBoxSpinButtonBorderThickness}" />
      <Setter Property="FontSize" Value="12" />
      <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    </Style.Setters>
  </Style>
  <Style x:Name="NumberBoxPopupSpinButtonStyle" TargetType="RepeatButton">
    <Style.Setters>
      <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
      <Setter Property="IsTabStop" Value="False" />
      <Setter Property="Width" Value="36" />
      <Setter Property="Height" Value="36" />
      <Setter Property="Padding" Value="0" />
      <Setter Property="BorderThickness" Value="{ThemeResource NumberBoxPopupSpinButtonBorderThickness}" />
      <Setter Property="FontSize" Value="16" />
      <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    </Style.Setters>
  </Style>
  <Style x:Key="NumberBoxTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Grid>
            <Grid.Resources>
              <Style x:Name="DeleteButtonStyle" TargetType="Button">
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <Grid x:Name="ButtonLayoutGrid" Margin="{ThemeResource TextBoxInnerButtonMargin}" BorderBrush="{ThemeResource TextControlButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{ThemeResource TextControlButtonBackground}" CornerRadius="{ThemeResource ControlCornerRadius}">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="PointerOver">
                              <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="Background">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonBackgroundPointerOver}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="BorderBrush">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonBorderBrushPointerOver}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlyphElement" Storyboard.TargetProperty="Foreground">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonForegroundPointerOver}" />
                                </ObjectAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                              <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="Background">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonBackgroundPressed}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="BorderBrush">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonBorderBrushPressed}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlyphElement" Storyboard.TargetProperty="Foreground">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonForegroundPressed}" />
                                </ObjectAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                              </Storyboard>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <TextBlock x:Name="GlyphElement" Foreground="{ThemeResource TextControlButtonForeground}" VerticalAlignment="Center" HorizontalAlignment="Center" FontStyle="Normal" FontSize="{ThemeResource TextBoxIconFontSize}" Text="&#xE894;" FontFamily="{ThemeResource SymbolThemeFontFamily}" AutomationProperties.AccessibilityView="Raw" />
                      </Grid>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlHeaderForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBorderBrushDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderTextContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlPlaceholderForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBorderBrushPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderTextContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlPlaceholderForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderTextContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlPlaceholderForegroundFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBackgroundFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBorderBrushFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="BorderThickness">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBorderThemeThicknessFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlForegroundFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="RequestedTheme">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Light" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DeleteButton" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="SpinButtonStates">
                <VisualState x:Name="SpinButtonsCollapsed" />
                <VisualState x:Name="SpinButtonsPopup">
                  <VisualState.Setters>
                    <Setter Target="PopupIndicator.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SpinButtonsVisible">
                  <VisualState.Setters>
                    <Setter Target="SpinButtonsColumn.Width" Value="72" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition x:Name="SpinButtonsColumn" Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="HeaderContentPresenter" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" FontWeight="Normal" Foreground="{ThemeResource TextControlHeaderForeground}" Margin="{ThemeResource TextBoxTopHeaderMargin}" TextWrapping="Wrap" VerticalAlignment="Top" Visibility="Collapsed" x:DeferLoadStrategy="Lazy" />
            <Border x:Name="BorderElement" Grid.Row="1" Grid.Column="0" Grid.RowSpan="1" Grid.ColumnSpan="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{ThemeResource ControlCornerRadius}" Control.IsTemplateFocusTarget="True" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" />
            <ScrollViewer x:Name="ContentElement" Grid.Row="1" Grid.Column="0" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" IsTabStop="False" AutomationProperties.AccessibilityView="Raw" ZoomMode="Disabled" />
            <TextBlock x:Name="PlaceholderTextContentPresenter" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Foreground="{ThemeResource TextControlPlaceholderForeground}" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Text="{TemplateBinding PlaceholderText}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" IsHitTestVisible="False" />
            <Button x:Name="DeleteButton" Grid.Row="1" Grid.Column="1" Style="{StaticResource DeleteButtonStyle}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{ThemeResource HelperButtonThemePadding}" IsTabStop="False" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="Right" MinWidth="40" VerticalAlignment="Stretch" />
            <TextBlock x:Name="PopupIndicator" Grid.Row="1" Grid.Column="2" Visibility="Collapsed" Margin="{StaticResource NumberBoxPopupIndicatorMargin}" Foreground="{ThemeResource NumberBoxPopupIndicatorForeground}" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="12" Text="&#xEC8F;" FontFamily="{ThemeResource SymbolThemeFontFamily}" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:Expander" BasedOn="{StaticResource DefaultExpanderStyle}" />
  <Style x:Key="DefaultExpanderStyle" TargetType="controls:Expander">
    <!-- We won't make this control tab stoppable, since the tab focus should go
            to the toggle button. For this logic, several things were made:
            1. Expander::OnApplyTemplate - We set the toggle button's events source to the expander's. This will announce expander properties
               (expand/collapse) changes to narrator. Without this, narrator would announce the toggle button's "on/off" logic
               instead of the "expand/collapse" logic.
            2. ExpanderAutomationPeer::GetChildrenCore - Because of 1., we need to override GetChildrenCore to NOT include the toggle button.
               If we don't do this, we create a weird dependency cycle between the toggle button and the expander.
            3. ExpanderAutomationPeer::GetPeerFromPointCore Finally, when using narrator with a touch screen, this was overriden as well, to
               focus the toggle button programmatically to sync the narrator focus with the keyboard focus.
               Without this override, the narrator user that focuses the expander on a touch screen will see that pressing "Tab"
               doesn't work how they would expect.-->
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Background" Value="{ThemeResource ExpanderContentBackground}" />
    <Setter Property="MinWidth" Value="{ThemeResource FlyoutThemeMinWidth}" />
    <Setter Property="MinHeight" Value="{StaticResource ExpanderMinHeight}" />
    <Setter Property="BorderThickness" Value="{ThemeResource ExpanderContentDownBorderThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource ExpanderContentBorderBrush}" />
    <Setter Property="Padding" Value="{StaticResource ExpanderContentPadding}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:Expander">
          <Grid MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ExpandStates">
                <VisualState x:Name="ExpandUp">
                  <VisualState.Setters />
                  <VisualState.Storyboard>
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateY)">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContentHeight}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.0, 0.0, 0.0, 1.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState.Storyboard>
                </VisualState>
                <VisualState x:Name="CollapseDown">
                  <VisualState.Storyboard>
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="Collapsed" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateY)">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.167" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContentHeight}" KeySpline="1.0, 1.0, 0.0, 1.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState.Storyboard>
                </VisualState>
                <VisualState x:Name="ExpandDown">
                  <VisualState.Setters />
                  <VisualState.Storyboard>
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateY)">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.NegativeContentHeight}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.0, 0.0, 0.0, 1.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState.Storyboard>
                </VisualState>
                <VisualState x:Name="CollapseUp">
                  <VisualState.Storyboard>
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.167" Value="Collapsed" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateY)">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.167" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.NegativeContentHeight}" KeySpline="1.0, 1.0, 0.0, 1.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState.Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ExpandDirectionStates">
                <VisualState x:Name="Down" />
                <VisualState x:Name="Up">
                  <VisualState.Setters>
                    <Setter Target="ExpanderHeader.Style" Value="{StaticResource ExpanderHeaderUpStyle}" />
                    <Setter Target="ExpanderContent.BorderThickness" Value="{StaticResource ExpanderContentUpBorderThickness}" />
                    <Setter Target="ExpanderHeader.(Grid.Row)" Value="1" />
                    <Setter Target="ExpanderContentClip.(Grid.Row)" Value="0" />
                    <Setter Target="Row0.Height" Value="*" />
                    <Setter Target="Row1.Height" Value="Auto" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="Row0" Height="Auto" />
              <RowDefinition x:Name="Row1" Height="*" />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="ExpanderHeader" AutomationProperties.AutomationId="ExpanderToggleButton" Background="{ThemeResource ExpanderHeaderBackground}" BorderBrush="{ThemeResource ExpanderHeaderBorderBrush}" BorderThickness="{ThemeResource ExpanderHeaderBorderThickness}" MinHeight="{TemplateBinding MinHeight}" IsEnabled="{TemplateBinding IsEnabled}" Padding="{StaticResource ExpanderHeaderPadding}" Style="{StaticResource ExpanderHeaderDownStyle}" HorizontalAlignment="Stretch" HorizontalContentAlignment="{StaticResource ExpanderHeaderHorizontalContentAlignment}" VerticalContentAlignment="{StaticResource ExpanderHeaderVerticalContentAlignment}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <!-- The clip is a composition clip applied in code -->
            <Border x:Name="ExpanderContentClip" Grid.Row="1">
              <Border x:Name="ExpanderContent" Visibility="Collapsed" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{StaticResource ExpanderContentDownBorderThickness}" MinHeight="{TemplateBinding MinHeight}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Padding="{TemplateBinding Padding}">
                <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                <Border.RenderTransform>
                  <CompositeTransform />
                </Border.RenderTransform>
              </Border>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:PagerControl">
    <Setter Property="AutomationProperties.LandmarkType" Value="Navigation" />
    <Setter Property="FirstButtonStyle" Value="{StaticResource PagerControlPageNavigationButtonStyle}" />
    <Setter Property="PreviousButtonStyle" Value="{StaticResource PagerControlPageNavigationButtonStyle}" />
    <Setter Property="NextButtonStyle" Value="{StaticResource PagerControlPageNavigationButtonStyle}" />
    <Setter Property="LastButtonStyle" Value="{StaticResource PagerControlPageNavigationButtonStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:PagerControl">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="FirstPageButtonVisibilityStates">
                <VisualState x:Name="FirstPageButtonVisible" />
                <VisualState x:Name="FirstPageButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="FirstPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="FirstPageButtonHidden">
                  <VisualState.Setters>
                    <Setter Target="FirstPageButton.Opacity" Value="0" />
                    <Setter Target="FirstPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FirstPageButtonIsEnabledStates">
                <VisualState x:Name="FirstPageButtonEnabled" />
                <VisualState x:Name="FirstPageButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="FirstPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PreviousPageButtonVisibilityStates">
                <VisualState x:Name="PreviousPageButtonVisible" />
                <VisualState x:Name="PreviousPageButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PreviousPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PreviousPageButtonHidden">
                  <VisualState.Setters>
                    <Setter Target="PreviousPageButton.Opacity" Value="0" />
                    <Setter Target="PreviousPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PreviousPageButtonIsEnabledStates">
                <VisualState x:Name="PreviousPageButtonEnabled" />
                <VisualState x:Name="PreviousPageButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="PreviousPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NextPageButtonVisibilityStates">
                <VisualState x:Name="NextPageButtonVisible" />
                <VisualState x:Name="NextPageButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="NextPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NextPageButtonIsEnabledStates">
                <VisualState x:Name="NextPageButtonEnabled" />
                <VisualState x:Name="NextPageButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="NextPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NextPageButtonHidden">
                  <VisualState.Setters>
                    <Setter Target="NextPageButton.Opacity" Value="0" />
                    <Setter Target="NextPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="LastPageButtonStates">
                <VisualState x:Name="LastPageButtonVisible" />
                <VisualState x:Name="LastPageButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="LastPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="LastPageButtonEnabled" />
                <VisualState x:Name="LastPageButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="LastPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="LastPageButtonHidden">
                  <VisualState.Setters>
                    <Setter Target="LastPageButton.Opacity" Value="0" />
                    <Setter Target="LastPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PagerDisplayModeStates">
                <VisualState x:Name="NumberBoxVisible">
                  <VisualState.Setters>
                    <Setter Target="BoxPanels.Visibility" Value="Visible" />
                    <Setter Target="NumberBoxDisplay.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ComboBoxVisible">
                  <VisualState.Setters>
                    <Setter Target="ComboBoxDisplay.IsEnabled" Value="True" />
                    <Setter Target="BoxPanels.Visibility" Value="Visible" />
                    <Setter Target="ComboBoxDisplay.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NumberPanelVisible">
                  <VisualState.Setters>
                    <Setter Target="BoxPanels.Visibility" Value="Collapsed" />
                    <Setter Target="NumberBoxDisplay.Visibility" Value="Collapsed" />
                    <Setter Target="ComboBoxDisplay.Visibility" Value="Collapsed" />
                    <Setter Target="NumberPanelItemsRepeater.Visibility" Value="Visible" />
                    <Setter Target="NumberPanelCurrentPageIndicator.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="InfiniteItemsDisplayMode">
                <VisualState x:Name="FiniteItems" />
                <VisualState x:Name="InfiniteItems">
                  <VisualState.Setters>
                    <Setter Target="SuffixTextLabel.Visibility" Value="Collapsed" />
                    <Setter Target="TotalNumberOfPagesLabel.Visibility" Value="Collapsed" />
                    <Setter Target="LastPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
              <Button x:Name="FirstPageButton" ToolTipService.ToolTip="{Binding ElementName=FirstPageButton, Path=(AutomationProperties.Name)}" Style="{TemplateBinding FirstButtonStyle}" FontFamily="{StaticResource SymbolThemeFontFamily}" Content="&#xE892;" />
              <Button x:Name="PreviousPageButton" ToolTipService.ToolTip="{Binding ElementName=PreviousPageButton, Path=(AutomationProperties.Name)}" Style="{TemplateBinding PreviousButtonStyle}" FontFamily="{StaticResource SymbolThemeFontFamily}" Content="&#xE76B;" />
            </StackPanel>
            <StackPanel x:Name="BoxPanels" Visibility="Collapsed" Orientation="Horizontal" Grid.Column="1">
              <TextBlock Text="{TemplateBinding PrefixText}" VerticalAlignment="Center" Margin="5,0,5,0" />
              <!--NumberBox Display-->
              <controls:NumberBox x:Name="NumberBoxDisplay" HorizontalAlignment="Center" VerticalAlignment="Center" Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NumberOfPages, Mode=OneWay}" Minimum="1" SmallChange="1" LargeChange="5" Visibility="Collapsed" />
              <!--ComboBox Display-->
              <ComboBox x:Name="ComboBoxDisplay" HorizontalAlignment="Center" VerticalAlignment="Center" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Pages}" Visibility="Collapsed" />
              <TextBlock x:Name="SuffixTextLabel" Text="{TemplateBinding SuffixText}" VerticalAlignment="Center" Margin="5,0,0,0" />
              <TextBlock x:Name="TotalNumberOfPagesLabel" VerticalAlignment="Center" Margin="5,0,5,0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NumberOfPages, Mode=OneWay}" />
            </StackPanel>
            <controls:ItemsRepeater x:Name="NumberPanelItemsRepeater" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.NumberPanelItems}" Grid.Column="1" Visibility="Collapsed">
              <controls:ItemsRepeater.Layout>
                <controls:StackLayout Orientation="Horizontal" Spacing="5" />
              </controls:ItemsRepeater.Layout>
            </controls:ItemsRepeater>
            <Rectangle x:Name="NumberPanelCurrentPageIndicator" HorizontalAlignment="Left" VerticalAlignment="Bottom" Grid.Column="1" Visibility="Collapsed" Fill="{ThemeResource PagerControlSelectionIndicatorForeground}" RadiusX="1" RadiusY="1" Height="2">
              <Rectangle.Transitions>
                <TransitionCollection>
                  <RepositionThemeTransition />
                </TransitionCollection>
              </Rectangle.Transitions>
            </Rectangle>
            <StackPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Left">
              <Button x:Name="NextPageButton" ToolTipService.ToolTip="{Binding ElementName=NextPageButton, Path=(AutomationProperties.Name)}" Style="{TemplateBinding NextButtonStyle}" FontFamily="{StaticResource SymbolThemeFontFamily}" Content="&#xE76C;" />
              <Button x:Name="LastPageButton" ToolTipService.ToolTip="{Binding ElementName=LastPageButton, Path=(AutomationProperties.Name)}" Style="{TemplateBinding LastButtonStyle}" FontFamily="{StaticResource SymbolThemeFontFamily}" Content="&#xE893;" />
            </StackPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:InfoBar">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="CloseButtonStyle" Value="{StaticResource InfoBarCloseButtonStyle}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{ThemeResource InfoBarBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource InfoBarBorderThickness}" />
    <Setter Property="AutomationProperties.LandmarkType" Value="Custom" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:InfoBar">
          <Border x:Name="ContentRoot" VerticalAlignment="Top" Background="{ThemeResource InfoBarInformationalSeverityBackgroundBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="SeverityLevels">
                <VisualState x:Name="Informational" />
                <VisualState x:Name="Error">
                  <VisualState.Setters>
                    <Setter Target="ContentRoot.Background" Value="{ThemeResource InfoBarErrorSeverityBackgroundBrush}" />
                    <Setter Target="IconBackground.Foreground" Value="{ThemeResource InfoBarErrorSeverityIconBackground}" />
                    <Setter Target="StandardIcon.Text" Value="{StaticResource InfoBarErrorIconGlyph}" />
                    <Setter Target="StandardIcon.Foreground" Value="{ThemeResource InfoBarErrorSeverityIconForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Warning">
                  <VisualState.Setters>
                    <Setter Target="ContentRoot.Background" Value="{ThemeResource InfoBarWarningSeverityBackgroundBrush}" />
                    <Setter Target="IconBackground.Foreground" Value="{ThemeResource InfoBarWarningSeverityIconBackground}" />
                    <Setter Target="StandardIcon.Text" Value="{StaticResource InfoBarWarningIconGlyph}" />
                    <Setter Target="StandardIcon.Foreground" Value="{ThemeResource InfoBarWarningSeverityIconForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Success">
                  <VisualState.Setters>
                    <Setter Target="ContentRoot.Background" Value="{ThemeResource InfoBarSuccessSeverityBackgroundBrush}" />
                    <Setter Target="IconBackground.Foreground" Value="{ThemeResource InfoBarSuccessSeverityIconBackground}" />
                    <Setter Target="StandardIcon.Text" Value="{StaticResource InfoBarSuccessIconGlyph}" />
                    <Setter Target="StandardIcon.Foreground" Value="{ThemeResource InfoBarSuccessSeverityIconForeground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="StandardIconVisible">
                  <VisualState.Setters>
                    <Setter Target="UserIconBox.Visibility" Value="Collapsed" />
                    <Setter Target="StandardIconArea.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="UserIconVisible">
                  <VisualState.Setters>
                    <Setter Target="UserIconBox.Visibility" Value="Visible" />
                    <Setter Target="StandardIconArea.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NoIconVisible" />
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="CloseButtonVisible" />
                <VisualState x:Name="CloseButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="InfoBarVisibility">
                <VisualState x:Name="InfoBarVisible" />
                <VisualState x:Name="InfoBarCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ContentRoot.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="ForegroundNotSet" />
                <VisualState x:Name="ForegroundSet">
                  <VisualState.Setters>
                    <Setter Target="Title.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
                    <Setter Target="Message.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Background is used here so that it overrides the severity status color if set. -->
            <Grid HorizontalAlignment="Stretch" MinHeight="{ThemeResource InfoBarMinHeight}" Background="{TemplateBinding Background}" Padding="{StaticResource InfoBarContentRootPadding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <!-- Icon -->
                <ColumnDefinition Width="*" />
                <!-- Title, message, and action -->
                <ColumnDefinition Width="Auto" />
                <!-- Close button -->
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid x:Name="StandardIconArea" Visibility="Collapsed">
                <TextBlock x:Name="IconBackground" Grid.Column="0" VerticalAlignment="Top" Margin="{StaticResource InfoBarIconMargin}" FontSize="{StaticResource InfoBarIconFontSize}" Text="{StaticResource InfoBarIconBackgroundGlyph}" Foreground="{ThemeResource InfoBarInformationalSeverityIconBackground}" FontFamily="{ThemeResource SymbolThemeFontFamily}" AutomationProperties.AccessibilityView="Raw" />
                <TextBlock x:Name="StandardIcon" Grid.Column="0" VerticalAlignment="Top" Margin="{StaticResource InfoBarIconMargin}" FontSize="{StaticResource InfoBarIconFontSize}" Text="{StaticResource InfoBarInformationalIconGlyph}" Foreground="{ThemeResource InfoBarInformationalSeverityIconForeground}" FontFamily="{ThemeResource SymbolThemeFontFamily}" />
              </Grid>
              <Viewbox x:Name="UserIconBox" Grid.Column="0" Visibility="Collapsed" VerticalAlignment="Top" MaxWidth="{ThemeResource InfoBarIconFontSize}" MaxHeight="{ThemeResource InfoBarIconFontSize}" Margin="{ThemeResource InfoBarIconMargin}" Child="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.IconElement}" />
              <primitives:InfoBarPanel Grid.Column="1" Margin="{StaticResource InfoBarPanelMargin}" HorizontalOrientationPadding="{StaticResource InfoBarPanelHorizontalOrientationPadding}" VerticalOrientationPadding="{StaticResource InfoBarPanelVerticalOrientationPadding}">
                <TextBlock x:Name="Title" Text="{TemplateBinding Title}" Foreground="{ThemeResource InfoBarTitleForeground}" primitives:InfoBarPanel.HorizontalOrientationMargin="{StaticResource InfoBarTitleHorizontalOrientationMargin}" primitives:InfoBarPanel.VerticalOrientationMargin="{StaticResource InfoBarTitleVerticalOrientationMargin}" TextWrapping="WrapWholeWords" FontWeight="{StaticResource InfoBarTitleFontWeight}" FontSize="{StaticResource InfoBarTitleFontSize}" />
                <TextBlock x:Name="Message" Text="{TemplateBinding Message}" Foreground="{ThemeResource InfoBarMessageForeground}" primitives:InfoBarPanel.HorizontalOrientationMargin="{StaticResource InfoBarMessageHorizontalOrientationMargin}" primitives:InfoBarPanel.VerticalOrientationMargin="{StaticResource InfoBarMessageVerticalOrientationMargin}" TextWrapping="WrapWholeWords" FontWeight="{StaticResource InfoBarMessageFontWeight}" FontSize="{StaticResource InfoBarMessageFontSize}" />
                <ContentPresenter primitives:InfoBarPanel.HorizontalOrientationMargin="{StaticResource InfoBarActionHorizontalOrientationMargin}" primitives:InfoBarPanel.VerticalOrientationMargin="{StaticResource InfoBarActionVerticalOrientationMargin}" VerticalAlignment="Top" Content="{TemplateBinding ActionButton}">
                  <ContentPresenter.Resources>
                    <Style TargetType="HyperlinkButton" BasedOn="{StaticResource DefaultHyperlinkButtonStyle}">
                      <Style.Setters>
                        <Setter Property="Margin" Value="{StaticResource InfoBarHyperlinkButtonMargin}" />
                        <Setter Property="Foreground" Value="{ThemeResource InfoBarHyperlinkButtonForeground}" />
                      </Style.Setters>
                    </Style>
                  </ContentPresenter.Resources>
                </ContentPresenter>
              </primitives:InfoBarPanel>
              <ContentPresenter Grid.Column="1" Grid.Row="1" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
              <Button Name="CloseButton" Grid.Column="2" Command="{TemplateBinding CloseButtonCommand}" CommandParameter="{TemplateBinding CloseButtonCommandParameter}" Style="{TemplateBinding CloseButtonStyle}">
                <Button.Resources>
                  <ResourceDictionary>
                    <ResourceDictionary.ThemeDictionaries>
                      <ResourceDictionary x:Key="Default">
                        <StaticResource x:Key="ButtonBackground" ResourceKey="AppBarButtonBackground" />
                        <StaticResource x:Key="ButtonBackgroundPointerOver" ResourceKey="AppBarButtonBackgroundPointerOver" />
                        <StaticResource x:Key="ButtonBackgroundPressed" ResourceKey="AppBarButtonBackgroundPressed" />
                        <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="AppBarButtonBackgroundDisabled" />
                        <StaticResource x:Key="ButtonForeground" ResourceKey="AppBarButtonForeground" />
                        <StaticResource x:Key="ButtonForegroundPointerOver" ResourceKey="AppBarButtonForegroundPointerOver" />
                        <StaticResource x:Key="ButtonForegroundPressed" ResourceKey="AppBarButtonForegroundPressed" />
                        <StaticResource x:Key="ButtonForegroundDisabled" ResourceKey="AppBarButtonForegroundDisabled" />
                        <StaticResource x:Key="ButtonBorderBrush" ResourceKey="AppBarButtonBorderBrush" />
                        <StaticResource x:Key="ButtonBorderBrushPointerOver" ResourceKey="AppBarButtonBorderBrushPointerOver" />
                        <StaticResource x:Key="ButtonBorderBrushPressed" ResourceKey="AppBarButtonBorderBrushPressed" />
                        <StaticResource x:Key="ButtonBorderBrushDisabled" ResourceKey="AppBarButtonBorderBrushDisabled" />
                      </ResourceDictionary>
                      <ResourceDictionary x:Key="HighContrast">
                        <StaticResource x:Key="ButtonBackground" ResourceKey="AppBarButtonBackground" />
                        <StaticResource x:Key="ButtonBackgroundPointerOver" ResourceKey="AppBarButtonBackgroundPointerOver" />
                        <StaticResource x:Key="ButtonBackgroundPressed" ResourceKey="AppBarButtonBackgroundPressed" />
                        <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="AppBarButtonBackgroundDisabled" />
                        <StaticResource x:Key="ButtonForeground" ResourceKey="AppBarButtonForeground" />
                        <StaticResource x:Key="ButtonForegroundPointerOver" ResourceKey="AppBarButtonForegroundPointerOver" />
                        <StaticResource x:Key="ButtonForegroundPressed" ResourceKey="AppBarButtonForegroundPressed" />
                        <StaticResource x:Key="ButtonForegroundDisabled" ResourceKey="AppBarButtonForegroundDisabled" />
                        <StaticResource x:Key="ButtonBorderBrush" ResourceKey="AppBarButtonBorderBrush" />
                        <StaticResource x:Key="ButtonBorderBrushPointerOver" ResourceKey="AppBarButtonBorderBrushPointerOver" />
                        <StaticResource x:Key="ButtonBorderBrushPressed" ResourceKey="AppBarButtonBorderBrushPressed" />
                        <StaticResource x:Key="ButtonBorderBrushDisabled" ResourceKey="AppBarButtonBorderBrushDisabled" />
                      </ResourceDictionary>
                      <ResourceDictionary x:Key="Light">
                        <StaticResource x:Key="ButtonBackground" ResourceKey="AppBarButtonBackground" />
                        <StaticResource x:Key="ButtonBackgroundPointerOver" ResourceKey="AppBarButtonBackgroundPointerOver" />
                        <StaticResource x:Key="ButtonBackgroundPressed" ResourceKey="AppBarButtonBackgroundPressed" />
                        <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="AppBarButtonBackgroundDisabled" />
                        <StaticResource x:Key="ButtonForeground" ResourceKey="AppBarButtonForeground" />
                        <StaticResource x:Key="ButtonForegroundPointerOver" ResourceKey="AppBarButtonForegroundPointerOver" />
                        <StaticResource x:Key="ButtonForegroundPressed" ResourceKey="AppBarButtonForegroundPressed" />
                        <StaticResource x:Key="ButtonForegroundDisabled" ResourceKey="AppBarButtonForegroundDisabled" />
                        <StaticResource x:Key="ButtonBorderBrush" ResourceKey="AppBarButtonBorderBrush" />
                        <StaticResource x:Key="ButtonBorderBrushPointerOver" ResourceKey="AppBarButtonBorderBrushPointerOver" />
                        <StaticResource x:Key="ButtonBorderBrushPressed" ResourceKey="AppBarButtonBorderBrushPressed" />
                        <StaticResource x:Key="ButtonBorderBrushDisabled" ResourceKey="AppBarButtonBorderBrushDisabled" />
                      </ResourceDictionary>
                    </ResourceDictionary.ThemeDictionaries>
                  </ResourceDictionary>
                </Button.Resources>
                <Viewbox Width="{StaticResource InfoBarCloseButtonGlyphSize}" Height="{StaticResource InfoBarCloseButtonGlyphSize}" HorizontalAlignment="Center" VerticalAlignment="Center">
                  <SymbolIcon Symbol="{StaticResource InfoBarCloseButtonSymbol}" />
                </Viewbox>
              </Button>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultBreadcrumbBarItemStyle" TargetType="controls:BreadcrumbBarItem">
    <Setter Property="Background" Value="{ThemeResource BreadcrumbBarBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource BreadcrumbBarBorderBrush}" />
    <Setter Property="FocusVisualMargin" Value="1" />
    <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{ThemeResource BreadcrumbBarItemThemeFontSize}" />
    <Setter Property="FontWeight" Value="{ThemeResource BreadcrumbBarItemFontWeight}" />
    <Setter Property="Foreground" Value="{ThemeResource BreadcrumbBarForegroundBrush}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="True" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:BreadcrumbBarItem">
          <Grid x:Name="PART_LayoutRoot" CornerRadius="{ThemeResource ControlCornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ItemTypeStates">
                <VisualState x:Name="Inline" />
                <VisualState x:Name="EllipsisDropDown">
                  <VisualState.Setters>
                    <Setter Target="PART_ItemButton.Visibility" Value="Collapsed" />
                    <Setter Target="PART_ChevronTextBlock.Visibility" Value="Collapsed" />
                    <Setter Target="PART_ContentColumn.Width" Value="*" />
                    <Setter Target="PART_EllipsisDropDownItemContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="PART_LayoutRoot.Padding" Value="11,7,11,9" />
                    <Setter Target="PART_LayoutRoot.Margin" Value="5,3" />
                    <Setter Target="PART_LayoutRoot.FocusVisualMargin" Value="-3" />
                    <Setter Target="PART_ItemButton.(Control.IsTemplateFocusTarget)" Value="False" />
                    <Setter Target="PART_LayoutRoot.(Control.IsTemplateFocusTarget)" Value="True" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="EllipsisDropDownItemCommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="PART_LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_LayoutRoot" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource BreadcrumbBarEllipsisDropDownItemBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_EllipsisDropDownItemContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource BreadcrumbBarEllipsisDropDownItemForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_LayoutRoot" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource BreadcrumbBarEllipsisDropDownItemBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_EllipsisDropDownItemContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource BreadcrumbBarEllipsisDropDownItemForegroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_LayoutRoot" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource BreadcrumbBarEllipsisDropDownItemBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_EllipsisDropDownItemContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource BreadcrumbBarEllipsisDropDownItemForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="InlineItemTypeStates">
                <VisualState x:Name="Default">
                  <VisualState.Setters>
                    <Setter Target="PART_ChevronTextBlock.Text" Value="{ThemeResource BreadcrumbBarChevronLeftToRight}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="DefaultRTL">
                  <VisualState.Setters>
                    <Setter Target="PART_ChevronTextBlock.Text" Value="{ThemeResource BreadcrumbBarChevronRightToLeft}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="LastItem">
                  <VisualState.Setters>
                    <Setter Target="PART_ItemButton.Visibility" Value="Collapsed" />
                    <Setter Target="PART_ChevronTextBlock.Visibility" Value="Collapsed" />
                    <Setter Target="PART_LastItemContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="PART_ItemButton.(Control.IsTemplateFocusTarget)" Value="False" />
                    <Setter Target="PART_LastItemContentPresenter.(Control.IsTemplateFocusTarget)" Value="True" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Ellipsis">
                  <VisualState.Setters>
                    <Setter Target="PART_ChevronTextBlock.Text" Value="{ThemeResource BreadcrumbBarChevronLeftToRight}" />
                    <Setter Target="PART_EllipsisTextBlock.Visibility" Value="Visible" />
                    <Setter Target="PART_ItemContentPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="EllipsisRTL">
                  <VisualState.Setters>
                    <Setter Target="PART_EllipsisTextBlock.Visibility" Value="Visible" />
                    <Setter Target="PART_ItemContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="PART_ChevronTextBlock.Text" Value="{ThemeResource BreadcrumbBarChevronRightToLeft}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.Resources>
              <Flyout x:Name="PART_EllipsisFlyout">
                <Flyout.FlyoutPresenterStyle>
                  <Style TargetType="FlyoutPresenter">
                    <Setter Property="Background" Value="{ThemeResource BreadcrumbBarEllipsisFlyoutPresenterBackground}" />
                    <Setter Property="BorderBrush" Value="{ThemeResource BreadcrumbBarEllipsisFlyoutPresenterBorderBrush}" />
                    <Setter Property="BorderThickness" Value="{ThemeResource BreadcrumbBarEllipsisFlyoutPresenterBorderThemeThickness}" />
                    <Setter Property="Padding" Value="0,2" />
                    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled" />
                    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.IsHorizontalRailEnabled" Value="False" />
                    <Setter Property="ScrollViewer.IsVerticalRailEnabled" Value="False" />
                    <Setter Property="ScrollViewer.ZoomMode" Value="Disabled" />
                    <Setter Property="MaxWidth" Value="{ThemeResource FlyoutThemeMaxWidth}" />
                    <Setter Property="MinHeight" Value="40" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="FlyoutPresenter">
                          <Grid Background="{TemplateBinding Background}" CornerRadius="{ThemeResource ControlCornerRadius}">
                            <ScrollViewer x:Name="FlyoutPresenterScrollViewer" Margin="{TemplateBinding Padding}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" Content="{TemplateBinding Content}" ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}" AutomationProperties.AccessibilityView="Raw" />
                            <Border x:Name="FlyoutPresenterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{ThemeResource ControlCornerRadius}" />
                          </Grid>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Flyout.FlyoutPresenterStyle>
              </Flyout>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" x:Name="PART_ContentColumn" />
              <ColumnDefinition Width="Auto" x:Name="PART_ChevronColumn" />
            </Grid.ColumnDefinitions>
            <Button x:Name="PART_ItemButton" x:DeferLoadStrategy="Lazy" Grid.Column="0" AutomationProperties.Name="BreadcrumbBarItemButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True" IsTabStop="False" FocusVisualMargin="-3" Padding="1,3" AutomationProperties.AccessibilityView="Raw">
              <Button.Style>
                <Style TargetType="Button">
                  <Setter Property="Foreground" Value="{ThemeResource BreadcrumbBarNormalForegroundBrush}" />
                  <Setter Property="BorderBrush" Value="{ThemeResource BreadcrumbBarBorderBrush}" />
                  <Setter Property="Background" Value="{ThemeResource BreadcrumbBarBackgroundBrush}" />
                  <Setter Property="HorizontalAlignment" Value="Left" />
                  <Setter Property="VerticalAlignment" Value="Center" />
                  <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
                  <Setter Property="FontWeight" Value="Normal" />
                  <Setter Property="FontSize" Value="{ThemeResource BreadcrumbBarItemThemeFontSize}" />
                  <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
                  <Setter Property="Padding" Value="0,0,0,0" />
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="Button">
                        <Grid Background="Transparent">
                          <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                              <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                  <Setter Target="PART_ContentPresenter.Foreground" Value="{ThemeResource BreadcrumbBarNormalForegroundBrush}" />
                                </VisualState.Setters>
                              </VisualState>
                              <!-- Current refers to the last item -->
                              <VisualState x:Name="CurrentNormal">
                                <VisualState.Setters>
                                  <Setter Target="PART_ContentPresenter.Foreground" Value="{ThemeResource BreadcrumbBarCurrentNormalForegroundBrush}" />
                                </VisualState.Setters>
                              </VisualState>
                              <VisualState x:Name="PointerOver">
                                <VisualState.Setters>
                                  <Setter Target="PART_ContentPresenter.Foreground" Value="{ThemeResource BreadcrumbBarHoverForegroundBrush}" />
                                  <Setter Target="PART_ContentPresenter.Background" Value="{ThemeResource BreadcrumbBarBackgroundBrush}" />
                                  <Setter Target="PART_ContentPresenter.BorderBrush" Value="{ThemeResource BreadcrumbBarBorderBrush}" />
                                </VisualState.Setters>
                              </VisualState>
                              <VisualState x:Name="CurrentPointerOver">
                                <VisualState.Setters>
                                  <Setter Target="PART_ContentPresenter.Foreground" Value="{ThemeResource BreadcrumbBarCurrentHoverForegroundBrush}" />
                                  <Setter Target="PART_ContentPresenter.Background" Value="{ThemeResource BreadcrumbBarBackgroundBrush}" />
                                  <Setter Target="PART_ContentPresenter.BorderBrush" Value="{ThemeResource BreadcrumbBarBorderBrush}" />
                                </VisualState.Setters>
                              </VisualState>
                              <VisualState x:Name="Pressed">
                                <VisualState.Setters>
                                  <Setter Target="PART_ContentPresenter.Foreground" Value="{ThemeResource BreadcrumbBarPressedForegroundBrush}" />
                                  <Setter Target="PART_ContentPresenter.Background" Value="{ThemeResource BreadcrumbBarBackgroundBrush}" />
                                  <Setter Target="PART_ContentPresenter.BorderBrush" Value="{ThemeResource BreadcrumbBarBorderBrush}" />
                                </VisualState.Setters>
                              </VisualState>
                              <VisualState x:Name="CurrentPressed">
                                <VisualState.Setters>
                                  <Setter Target="PART_ContentPresenter.Foreground" Value="{ThemeResource BreadcrumbBarCurrentPressedForegroundBrush}" />
                                  <Setter Target="PART_ContentPresenter.Background" Value="Transparent" />
                                  <Setter Target="PART_ContentPresenter.BorderBrush" Value="Transparent" />
                                </VisualState.Setters>
                              </VisualState>
                              <VisualState x:Name="Disabled">
                                <VisualState.Setters>
                                  <Setter Target="PART_ContentPresenter.Foreground" Value="{ThemeResource BreadcrumbBarDisabledForegroundBrush}" />
                                </VisualState.Setters>
                              </VisualState>
                              <VisualState x:Name="CurrentDisabled">
                                <VisualState.Setters>
                                  <Setter Target="PART_ContentPresenter.Foreground" Value="{ThemeResource BreadcrumbBarCurrentDisabledForegroundBrush}" />
                                </VisualState.Setters>
                              </VisualState>
                              <VisualState x:Name="Focus">
                                <VisualState.Setters>
                                  <Setter Target="PART_ContentPresenter.Foreground" Value="{ThemeResource BreadcrumbBarFocusForegroundBrush}" />
                                </VisualState.Setters>
                              </VisualState>
                              <VisualState x:Name="CurrentFocus">
                                <VisualState.Setters>
                                  <Setter Target="PART_ContentPresenter.Foreground" Value="{ThemeResource BreadcrumbBarCurrentFocusForegroundBrush}" />
                                </VisualState.Setters>
                              </VisualState>
                            </VisualStateGroup>
                          </VisualStateManager.VisualStateGroups>
                          <ContentPresenter x:Name="PART_ContentPresenter" AutomationProperties.Name="ContentPresenter" BorderBrush="{TemplateBinding BorderBrush}" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
                        </Grid>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </Button.Style>
              <!-- This is the Button Content -->
              <Grid AutomationProperties.Name="BreadcrumbBarItemGrid" AutomationProperties.AccessibilityView="Raw">
                <ContentPresenter x:Name="PART_ItemContentPresenter" AutomationProperties.Name="BreadcrumbBarItemContentPresenter" Grid.Column="0" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" LineHeight="20" AutomationProperties.AccessibilityView="Raw" />
                <TextBlock x:Name="PART_EllipsisTextBlock" AutomationProperties.Name="BreadcrumbBarEllipsisTextBlock" Grid.Column="0" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="{TemplateBinding FontSize}" Padding="3" Text="&#xE712;" Visibility="Collapsed" VerticalAlignment="Stretch" IsTextScaleFactorEnabled="False" AutomationProperties.AccessibilityView="Raw" />
              </Grid>
            </Button>
            <!-- ContentPresenter to be shown only when the rendered item is the Current Item -->
            <ContentPresenter x:Name="PART_LastItemContentPresenter" Grid.Column="0" Visibility="Collapsed" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" FocusVisualMargin="-3" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" Foreground="{ThemeResource BreadcrumbBarCurrentNormalForegroundBrush}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" LineHeight="20" Padding="1,3" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="{ThemeResource ControlCornerRadius}" AutomationProperties.AccessibilityView="Raw" />
            <!-- ContentPresenter to be shown only when the rendered item is a drop down Item -->
            <ContentPresenter x:Name="PART_EllipsisDropDownItemContentPresenter" x:DeferLoadStrategy="Lazy" Grid.Column="0" Visibility="Collapsed" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" HorizontalContentAlignment="Stretch" FontWeight="Normal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
            <!-- TextBlock that contains the chevron icon -->
            <TextBlock x:Name="PART_ChevronTextBlock" AutomationProperties.Name="ChevronTextBlock" Grid.Column="1" HorizontalAlignment="Center" IsTextScaleFactorEnabled="False" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="{ThemeResource BreadcrumbBarChevronFontSize}" Foreground="{ThemeResource BreadcrumbBarNormalForegroundBrush}" Text="&#xE76C;" Padding="{ThemeResource BreadcrumbBarChevronPadding}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:BreadcrumbBar">
    <Setter Property="AutomationProperties.LandmarkType" Value="Navigation" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:BreadcrumbBar">
          <controls:ItemsRepeater x:Name="PART_ItemsRepeater" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:BreadcrumbBarItem" BasedOn="{StaticResource DefaultBreadcrumbBarItemStyle}" />
  <Style TargetType="controls:PipsPager">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="PreviousButtonStyle" Value="{StaticResource PipsPagerPreviousPageButtonStyle}" />
    <Setter Property="NextButtonStyle" Value="{StaticResource PipsPagerNextPageButtonStyle}" />
    <Setter Property="SelectedPipStyle" Value="{StaticResource PipsPagerSelectedPipButtonStyle}" />
    <Setter Property="NormalPipStyle" Value="{StaticResource PipsPagerNormalPipButtonStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:PipsPager">
          <StackPanel x:Name="RootPanel" Orientation="{TemplateBinding Orientation}" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PreviousPageButtonVisibilityStates">
                <VisualState x:Name="PreviousPageButtonVisible" />
                <VisualState x:Name="PreviousPageButtonHidden">
                  <VisualState.Setters>
                    <Setter Target="PreviousPageButton.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PreviousPageButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PreviousPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PreviousPageButtonIsEnabledStates">
                <VisualState x:Name="PreviousPageButtonEnabled" />
                <VisualState x:Name="PreviousPageButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="PreviousPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NextPageButtonVisibilityStates">
                <VisualState x:Name="NextPageButtonVisible" />
                <VisualState x:Name="NextPageButtonHidden">
                  <VisualState.Setters>
                    <Setter Target="NextPageButton.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NextPageButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="NextPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NextPageButtonIsEnabledStates">
                <VisualState x:Name="NextPageButtonEnabled" />
                <VisualState x:Name="NextPageButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="NextPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="RootPanelOrientationStates">
                <VisualState x:Name="VerticalOrientationView" />
                <VisualState x:Name="HorizontalOrientationView">
                  <VisualState.Setters>
                    <Setter Target="RootPanel.Orientation" Value="Horizontal" />
                    <Setter Target="PreviousPageButton.(ToolTipService.Placement)" Value="Left" />
                    <Setter Target="PreviousPageButton.RenderTransformOrigin" Value="0.5, 0.5" />
                    <Setter Target="PreviousPageButton.RenderTransform">
                      <Setter.Value>
                        <RotateTransform Angle="-90" />
                      </Setter.Value>
                    </Setter>
                    <Setter Target="NextPageButton.(ToolTipService.Placement)" Value="Right" />
                    <Setter Target="NextPageButton.RenderTransformOrigin" Value="0.5, 0.5" />
                    <Setter Target="NextPageButton.RenderTransform">
                      <Setter.Value>
                        <RotateTransform Angle="-90" />
                      </Setter.Value>
                    </Setter>
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Button x:Name="PreviousPageButton" ToolTipService.ToolTip="{Binding ElementName=PreviousPageButton, Path=(AutomationProperties.Name)}" ToolTipService.Placement="Top" Style="{TemplateBinding PreviousButtonStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" />
            <ScrollViewer x:Name="PipsPagerScrollViewer" VerticalScrollBarVisibility="Hidden" VerticalScrollMode="Disabled" HorizontalScrollBarVisibility="Hidden" HorizontalScrollMode="Disabled" IsHorizontalScrollChainingEnabled="False" IsVerticalScrollChainingEnabled="False" HorizontalAlignment="Center" VerticalAlignment="Center">
              <controls:ItemsRepeater x:Name="PipsPagerItemsRepeater" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.PipsPagerItems}">
                <controls:ItemsRepeater.Layout>
                  <controls:StackLayout Orientation="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Orientation}" />
                </controls:ItemsRepeater.Layout>
                <controls:ItemsRepeater.ItemTemplate>
                  <DataTemplate>
                    <Button />
                  </DataTemplate>
                </controls:ItemsRepeater.ItemTemplate>
              </controls:ItemsRepeater>
            </ScrollViewer>
            <Button x:Name="NextPageButton" ToolTipService.ToolTip="{Binding ElementName=NextPageButton, Path=(AutomationProperties.Name)}" ToolTipService.Placement="Bottom" Style="{TemplateBinding NextButtonStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:ImageIcon" />
  <Style TargetType="primitives:CommandBarFlyoutCommandBar" BasedOn="{StaticResource DefaultCommandBarFlyoutCommandBarStyle}" />
  <Style TargetType="controls:TreeViewItem" BasedOn="{StaticResource DefaultListViewItemStyle}" x:Key="MUX_TreeViewItemStyle">
    <Setter Property="Padding" Value="0" />
    <Setter Property="Background" Value="{ThemeResource TreeViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource TreeViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource TreeViewItemBorderThemeThickness}" />
    <Setter Property="GlyphBrush" Value="{ThemeResource TreeViewItemForeground}" />
    <Setter Property="MinHeight" Value="{ThemeResource TreeViewItemMinHeight}" />
    <Setter Property="FocusVisualMargin" Value="0,-1,0,-1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TreeViewItem">
          <Grid x:Name="ContentPresenterGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="{ThemeResource TreeViewItemPresenterMargin}" Padding="{ThemeResource TreeViewItemPresenterPadding}" CornerRadius="{ThemeResource ControlCornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundPointerOver}" />
                    <Setter Target="SelectionIndicator.Fill" Value="{ThemeResource TreeViewItemSelectionIndicatorForegroundPointerOver}" />
                    <Setter Target="CollapsedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundPointerOver}" />
                    <Setter Target="ExpandedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushPointerOver}" />
                    <Setter Target="SelectionIndicator.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundPressed}" />
                    <Setter Target="SelectionIndicator.Fill" Value="{ThemeResource TreeViewItemSelectionIndicatorForegroundPressed}" />
                    <Setter Target="CollapsedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundPressed}" />
                    <Setter Target="ExpandedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushPressed}" />
                    <Setter Target="SelectionIndicator.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundSelected}" />
                    <Setter Target="SelectionIndicator.Fill" Value="{ThemeResource TreeViewItemSelectionIndicatorForeground}" />
                    <Setter Target="CollapsedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundSelected}" />
                    <Setter Target="ExpandedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushSelected}" />
                    <Setter Target="SelectionIndicator.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundDisabled}" />
                    <Setter Target="SelectionIndicator.Fill" Value="{ThemeResource TreeViewItemSelectionIndicatorForegroundDisabled}" />
                    <Setter Target="CollapsedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundDisabled}" />
                    <Setter Target="ExpandedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushDisabled}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedPointerOver}" />
                    <Setter Target="SelectionIndicator.Fill" Value="{ThemeResource TreeViewItemSelectionIndicatorForegroundPointerOver}" />
                    <Setter Target="CollapsedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedPointerOver}" />
                    <Setter Target="ExpandedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushSelectedPointerOver}" />
                    <Setter Target="SelectionIndicator.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundSelectedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedPressed}" />
                    <Setter Target="SelectionIndicator.Fill" Value="{ThemeResource TreeViewItemSelectionIndicatorForegroundPressed}" />
                    <Setter Target="CollapsedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedPressed}" />
                    <Setter Target="ExpandedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedPressed}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushSelectedPressed}" />
                    <Setter Target="SelectionIndicator.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SelectedDisabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundSelectedDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedDisabled}" />
                    <Setter Target="SelectionIndicator.Fill" Value="{ThemeResource TreeViewItemSelectionIndicatorForegroundDisabled}" />
                    <Setter Target="CollapsedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedDisabled}" />
                    <Setter Target="ExpandedGlyph.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedDisabled}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushSelectedDisabled}" />
                    <Setter Target="SelectionIndicator.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ReorderedPlaceholder">
                  <Storyboard>
                    <FadeOutThemeAnimation TargetName="MultiSelectGrid" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TreeViewMultiSelectStates">
                <VisualState x:Name="TreeViewMultiSelectDisabled" />
                <VisualState x:Name="TreeViewMultiSelectEnabledUnselected">
                  <VisualState.Setters>
                    <Setter Target="MultiSelectCheckBox.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevron.Padding" Value="0,0,14,0" />
                    <Setter Target="ContentPresenterGrid.Padding" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TreeViewMultiSelectEnabledSelected">
                  <VisualState.Setters>
                    <Setter Target="MultiSelectCheckBox.Visibility" Value="Visible" />
                    <Setter Target="MultiSelectGrid.Background" Value="{ThemeResource TreeViewItemBackgroundSelected}" />
                    <Setter Target="MultiSelectGrid.BorderBrush" Value="{ThemeResource TreeViewItemMultiSelectBorderBrushSelected}" />
                    <Setter Target="ExpandCollapseChevron.Padding" Value="0,0,14,0" />
                    <Setter Target="ContentPresenterGrid.Padding" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DragStates">
                <VisualState x:Name="NotDragging" />
                <VisualState x:Name="MultipleDraggingPrimary">
                  <VisualState.Setters>
                    <Setter Target="MultiSelectCheckBox.Opacity" Value="0" />
                    <Setter Target="MultiArrangeOverlayTextBorder.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="SelectionIndicator" Width="3" Height="16" Fill="{ThemeResource TreeViewItemSelectionIndicatorForeground}" Opacity="0" HorizontalAlignment="Left" VerticalAlignment="Center" />
            <Grid x:Name="MultiSelectGrid" Margin="{ThemeResource TreeViewItemMultiSelectSelectedItemBorderMargin}" Padding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TreeViewItemTemplateSettings.Indentation}" BorderBrush="Transparent" BorderThickness="{ThemeResource TreeViewItemBorderThemeThickness}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
              </Grid.ColumnDefinitions>
              <Grid Grid.Column="0">
                <CheckBox x:Name="MultiSelectCheckBox" Width="32" MinWidth="32" MinHeight="{ThemeResource TreeViewItemMultiSelectCheckBoxMinHeight}" Margin="10,0,0,0" VerticalAlignment="Center" Visibility="Collapsed" IsTabStop="False" AutomationProperties.AccessibilityView="Raw" />
                <Border x:Name="MultiArrangeOverlayTextBorder" Visibility="Collapsed" IsHitTestVisible="False" MinWidth="20" Height="20" VerticalAlignment="Center" HorizontalAlignment="Center" Background="{ThemeResource SystemControlBackgroundAccentBrush}" BorderThickness="1" BorderBrush="{ThemeResource SystemControlBackgroundChromeWhiteBrush}" CornerRadius="{ThemeResource ControlCornerRadius}">
                  <TextBlock x:Name="MultiArrangeOverlayText" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TreeViewItemTemplateSettings.DragItemsCount}" Style="{ThemeResource CaptionTextBlockStyle}" Foreground="{ThemeResource SystemControlForegroundChromeWhiteBrush}" IsHitTestVisible="False" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
                </Border>
              </Grid>
              <Grid x:Name="ExpandCollapseChevron" Grid.Column="1" Padding="14,0" Width="Auto" Opacity="{TemplateBinding GlyphOpacity}" Background="Transparent">
                <TextBlock x:Name="CollapsedGlyph" Foreground="{TemplateBinding GlyphBrush}" Width="12" Height="12" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TreeViewItemTemplateSettings.CollapsedGlyphVisibility}" FontSize="{TemplateBinding GlyphSize}" Text="{TemplateBinding CollapsedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" Padding="2" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False" IsHitTestVisible="False" />
                <TextBlock x:Name="ExpandedGlyph" Foreground="{TemplateBinding GlyphBrush}" Width="12" Height="12" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TreeViewItemTemplateSettings.ExpandedGlyphVisibility}" FontSize="{TemplateBinding GlyphSize}" Text="{TemplateBinding ExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" Padding="2" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False" IsHitTestVisible="False" />
              </Grid>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="2" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" MinHeight="{ThemeResource TreeViewItemContentHeight}" Margin="{TemplateBinding Padding}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>